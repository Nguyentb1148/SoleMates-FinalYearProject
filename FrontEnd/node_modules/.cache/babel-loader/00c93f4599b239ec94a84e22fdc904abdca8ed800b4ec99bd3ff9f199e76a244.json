{"ast":null,"code":"let axios = require(\"axios\");\nclass VietQR {\n  constructor({\n    clientID = '',\n    apiKey = ''\n  }) {\n    this.clientID = clientID;\n    this.apiKey = apiKey;\n    this.message = 'Please check your API key and client key';\n    this.apiUrl = 'https://api.vietqr.io';\n  }\n  checkKey() {\n    if (this.clientID == '' || this.apiKey == '') {\n      return false;\n    }\n    return true;\n  }\n  sendMessage(check) {\n    if (!check) console.log(this.message);\n  }\n  async getTemplate() {\n    if (this.checkKey()) {\n      return getData(`${this.apiUrl}/v2/template`);\n    }\n    this.sendMessage(this.checkKey());\n  }\n  async getBanks() {\n    if (this.checkKey()) {\n      return await getData(`${this.apiUrl}/v2/banks`);\n    }\n    this.sendMessage(this.checkKey());\n  }\n  async genQRCodeBase64({\n    bank = '',\n    accountName = '',\n    accountNumber = '',\n    amount = '',\n    memo = '',\n    template = 'qr_only'\n  }) {\n    if (this.checkKey()) {\n      return await postData(`${this.apiUrl}/v2/generate`, {\n        accountNo: accountNumber,\n        accountName: accountName,\n        acqId: bank,\n        addInfo: memo,\n        amount: amount,\n        template: template\n      });\n    }\n    this.sendMessage(this.checkKey());\n  }\n  async genQRCodeBase64V1({\n    bank = '',\n    accountName = '',\n    accountNumber = '',\n    amount = '',\n    memo = '',\n    format = 'qr_only'\n  }) {\n    if (this.checkKey()) {\n      return await postData(`${this.apiUrl}/v1/generate`, {\n        accountNo: accountNumber,\n        accountName: accountName,\n        acqId: bank,\n        addInfo: memo,\n        amount: amount,\n        format: format\n      });\n    }\n    this.sendMessage(this.checkKey());\n  }\n  genQuickLink({\n    bank = '',\n    accountName = '',\n    accountNumber = '',\n    amount = '',\n    memo = '',\n    template = 'qr_only',\n    media = ''\n  }) {\n    if (this.checkKey()) {\n      let url = media == '.jpg' ? encodeURI(`${this.apiUrl}/${bank}/${accountNumber}/${amount}/${memo}/${template}.jpg?accountName=${accountName}`).replace(/%20/g, \"+\") : encodeURI(`${this.apiUrl}/${bank}/${accountNumber}/${amount}/${memo}/${template}.png?accountName=${accountName}`).replace(/%20/g, \"+\");\n      return url;\n    }\n    this.sendMessage(this.checkKey());\n  }\n  async createPaymentGateway({\n    theme_slug,\n    platform = '',\n    bankId = '',\n    accountName = '',\n    accountNumber = '',\n    addInfo = '',\n    amount = ''\n  }) {\n    if (this.checkKey()) {\n      let entity = {\n        apiKey: this.clientID,\n        clientId: this.apiKey,\n        theme_slug: theme_slug\n      };\n      if (bankId) entity.bankId = bankId;\n      if (accountName) entity.accountName = accountName;\n      if (accountNumber) entity.accountNumber = accountNumber;\n      if (addInfo) entity.addInfo = addInfo;\n      if (amount) entity.amount = amount;\n      if (theme_slug) entity.theme = theme_slug;\n      if (platform) entity.platform = platform;\n      return await postData(`https://gateway.vietqr.io/payment-gateway/v1/createToken`, entity);\n    }\n    this.sendMessage(this.checkKey());\n  }\n}\nasync function getData(url) {\n  return await axios.get(url).then(data => {\n    return data.data;\n  }).catch(err => {\n    console.log(err);\n    return err;\n  });\n}\nasync function postData(url, data) {\n  return await axios.post(url, data).then(data => {\n    // console.log(data);\n    return data;\n  }).catch(err => {\n    console.log(err);\n    return err;\n  });\n}\nmodule.exports.VietQR = VietQR;","map":{"version":3,"names":["axios","require","VietQR","constructor","clientID","apiKey","message","apiUrl","checkKey","sendMessage","check","console","log","getTemplate","getData","getBanks","genQRCodeBase64","bank","accountName","accountNumber","amount","memo","template","postData","accountNo","acqId","addInfo","genQRCodeBase64V1","format","genQuickLink","media","url","encodeURI","replace","createPaymentGateway","theme_slug","platform","bankId","entity","clientId","theme","get","then","data","catch","err","post","module","exports"],"sources":["/Users/nguyentran/Desktop/FYPProject/FrontEnd/node_modules/vietqr/index.js"],"sourcesContent":["let axios = require(\"axios\");\nclass VietQR {\n    constructor({\n        clientID = '',\n        apiKey = '',\n\n    }) {\n        this.clientID = clientID;\n        this.apiKey = apiKey;\n        this.message = 'Please check your API key and client key';\n        this.apiUrl = 'https://api.vietqr.io';\n    }\n\n    checkKey() {\n        if (this.clientID == '' || this.apiKey == '') {\n            return false\n        }\n        return true\n    }\n\n    sendMessage(check) {\n        if (!check)\n            console.log(this.message);\n    }\n\n    async getTemplate() {\n        if (this.checkKey()) {\n            return getData(`${this.apiUrl}/v2/template`);\n        }\n        this.sendMessage(this.checkKey());\n\n    }\n\n    async getBanks() {\n        if (this.checkKey()) {\n            return await getData(`${this.apiUrl}/v2/banks`);\n        }\n        this.sendMessage(this.checkKey());\n    }\n\n    async genQRCodeBase64({\n        bank = '',\n        accountName = '',\n        accountNumber = '',\n        amount = '',\n        memo = '',\n        template = 'qr_only',\n    }) {\n        if (this.checkKey()) {\n            return await postData(`${this.apiUrl}/v2/generate`, {\n                accountNo: accountNumber,\n                accountName: accountName,\n                acqId: bank,\n                addInfo: memo,\n                amount: amount,\n                template: template,\n            });\n        }\n        this.sendMessage(this.checkKey());\n    }\n\n    async genQRCodeBase64V1({\n        bank = '',\n        accountName = '',\n        accountNumber = '',\n        amount = '',\n        memo = '',\n        format = 'qr_only',\n    }) {\n        if (this.checkKey()) {\n            return await postData(`${this.apiUrl}/v1/generate`, {\n                accountNo: accountNumber,\n                accountName: accountName,\n                acqId: bank,\n                addInfo: memo,\n                amount: amount,\n                format: format,\n            })\n        }\n        this.sendMessage(this.checkKey());\n    }\n    genQuickLink({\n        bank = '',\n        accountName = '',\n        accountNumber = '',\n        amount = '',\n        memo = '',\n        template = 'qr_only',\n        media = ''\n    }) {\n        if (this.checkKey()) {\n            let url = media == '.jpg' ?\n                encodeURI(`${this.apiUrl}/${bank}/${accountNumber}/${amount}/${(memo)}/${template}.jpg?accountName=${accountName}`).replace(/%20/g, \"+\")\n                :\n                encodeURI(`${this.apiUrl}/${bank}/${accountNumber}/${amount}/${memo}/${template}.png?accountName=${accountName}`).replace(/%20/g, \"+\");\n            return url\n        }\n        this.sendMessage(this.checkKey());\n    }\n    async createPaymentGateway({ theme_slug,\n        platform = '',\n        bankId = '',\n        accountName = '',\n        accountNumber = '',\n        addInfo = '',\n        amount = '',\n    }) {\n        if (this.checkKey()) {\n            let entity = {\n                apiKey: this.clientID,\n                clientId: this.apiKey,\n                theme_slug: theme_slug\n            }\n            if (bankId) entity.bankId = bankId;\n            if (accountName) entity.accountName = accountName;\n            if (accountNumber) entity.accountNumber = accountNumber;\n            if (addInfo) entity.addInfo = addInfo;\n            if (amount) entity.amount = amount;\n            if (theme_slug) entity.theme = theme_slug;\n            if (platform) entity.platform = platform;\n            return await postData(`https://gateway.vietqr.io/payment-gateway/v1/createToken`, entity);\n        }\n        this.sendMessage(this.checkKey());\n    }\n}\n\nasync function getData(url) {\n    return await axios.get(url)\n        .then(data => {\n            return data.data\n        })\n        .catch(err => {\n            console.log(err);\n            return err\n        })\n}\n\nasync function postData(url, data) {\n    return await axios.post(url, data)\n        .then(data => {\n            // console.log(data);\n            return data\n        })\n        .catch(err => {\n            console.log(err);\n            return err\n        })\n}\nmodule.exports.VietQR = VietQR"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}