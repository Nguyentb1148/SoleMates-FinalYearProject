{"ast":null,"code":"import axios from 'axios';\nconst baseLink = 'http://localhost:5163';\nconst authApi = axios.create({\n  baseURL: baseLink,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// authApi.interceptors.request.use((config) => {\n//     console.log(\"Interceptor hit for URL:\", config.url); // Debugging\n//     const token = localStorage.getItem('accessToken');\n//     if (token) {\n//         config.headers.Authorization = `Bearer ${token}`;\n//     }\n//     return config;\n// }, (error) => {\n//     return Promise.reject(error);\n// });\nauthApi.interceptors.response.use(response => response,\n// On success, just return the response\nasync error => {\n  const originalRequest = error.config;\n  if (error.response.status === 401 && !originalRequest._retry) {\n    originalRequest._retry = true; // Mark this request as already tried\n    const refreshToken = localStorage.getItem('refreshToken');\n    // Make a request to your refresh token endpoint\n    const tokenResponse = await baseLink.post('/Account/refresh-token', {\n      Token: refreshToken\n    });\n    const {\n      AccessToken\n    } = tokenResponse.data;\n    // Update local storage with the new access token\n    localStorage.setItem('accessToken', AccessToken);\n    // Update the failed request with the new access token and retry it\n    originalRequest.headers['Authorization'] = `Bearer ${AccessToken}`;\n    return authApi(originalRequest); // Retry the original request with the new token\n  }\n  return Promise.reject(error);\n});\nconst login = async credentials => {\n  try {\n    const response = await axios.post('http://localhost:5163/Account/login', credentials);\n    localStorage.setItem('accessToken', response.data.accessToken);\n    localStorage.setItem('refreshToken', response.data.refreshToken);\n    localStorage.setItem('user', response.data.user);\n    localStorage.setItem('role', response.data.role);\n    console.log('User logged in successfully.');\n    return response.data; // Return the response data\n  } catch (error) {\n    console.error('Error:', error);\n    throw error; // Throwing the error for further handling if necessary\n  }\n};\nconst register = async userData => {\n  try {\n    console.log(\"Register data\", userData);\n    const response = await authApi.post('/Account/register', userData);\n    return response.data;\n  } catch (error) {\n    console.error('Error:', error);\n    throw error;\n  }\n};\nconst getAuthorizedMessage = async () => {\n  try {\n    const response = await authApi.get('/User/authorized');\n    return response.data.message;\n  } catch (error) {\n    console.error('Error:', error);\n    throw error;\n  }\n};\nconst getUserOnlyMessage = async () => {\n  try {\n    const response = await authApi.get('/User/user-only');\n    return response.data.message;\n  } catch (error) {\n    console.error('Error:', error);\n    throw error;\n  }\n};\nexport { login, register, getAuthorizedMessage, getUserOnlyMessage };","map":{"version":3,"names":["axios","baseLink","authApi","create","baseURL","headers","interceptors","response","use","error","originalRequest","config","status","_retry","refreshToken","localStorage","getItem","tokenResponse","post","Token","AccessToken","data","setItem","Promise","reject","login","credentials","accessToken","user","role","console","log","register","userData","getAuthorizedMessage","get","message","getUserOnlyMessage"],"sources":["/Users/nguyentran/Desktop/FYPProject/FrontEnd/src/Api/AuthApi.js"],"sourcesContent":["import axios from 'axios';\n\nconst baseLink = 'http://localhost:5163';\n\nconst authApi = axios.create({\n    baseURL: baseLink,\n    headers: {\n        'Content-Type': 'application/json'\n    }\n});\n\n// authApi.interceptors.request.use((config) => {\n//     console.log(\"Interceptor hit for URL:\", config.url); // Debugging\n//     const token = localStorage.getItem('accessToken');\n//     if (token) {\n//         config.headers.Authorization = `Bearer ${token}`;\n//     }\n//     return config;\n// }, (error) => {\n//     return Promise.reject(error);\n// });\nauthApi.interceptors.response.use(\n    (response) => response, // On success, just return the response\n    async (error) => {\n        const originalRequest = error.config;\n        if (error.response.status === 401 && !originalRequest._retry) {\n            originalRequest._retry = true; // Mark this request as already tried\n            const refreshToken = localStorage.getItem('refreshToken');\n            // Make a request to your refresh token endpoint\n            const tokenResponse = await baseLink.post('/Account/refresh-token', { Token: refreshToken });\n            const { AccessToken } = tokenResponse.data;\n            // Update local storage with the new access token\n            localStorage.setItem('accessToken', AccessToken);\n            // Update the failed request with the new access token and retry it\n            originalRequest.headers['Authorization'] = `Bearer ${AccessToken}`;\n            return authApi(originalRequest); // Retry the original request with the new token\n        }\n        return Promise.reject(error);\n    }\n);\n\n\n\nconst login = async (credentials) => {\n    try {\n        const response = await axios.post('http://localhost:5163/Account/login', credentials);\n        localStorage.setItem('accessToken', response.data.accessToken);\n        localStorage.setItem('refreshToken', response.data.refreshToken);\n        localStorage.setItem('user',response.data.user)\n        localStorage.setItem('role',response.data.role)\n        console.log('User logged in successfully.');\n        return response.data; // Return the response data\n    } catch (error) {\n        console.error('Error:', error);\n        throw error; // Throwing the error for further handling if necessary\n    }\n};\n\nconst register = async (userData) => {\n    try {\n        console.log(\"Register data\", userData);\n        const response = await authApi.post('/Account/register', userData);\n        return response.data;\n    } catch (error) {\n        console.error('Error:', error);\n        throw error;\n    }\n};\nconst getAuthorizedMessage = async () => {\n    try {\n        const response = await authApi.get('/User/authorized');\n        return response.data.message;\n    } catch (error) {\n        console.error('Error:', error);\n        throw error;\n    }\n};\n\nconst getUserOnlyMessage = async () => {\n    try {\n        const response = await authApi.get('/User/user-only');\n        return response.data.message;\n    } catch (error) {\n        console.error('Error:', error);\n        throw error;\n    }\n};\nexport { login, register,getAuthorizedMessage,getUserOnlyMessage };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}