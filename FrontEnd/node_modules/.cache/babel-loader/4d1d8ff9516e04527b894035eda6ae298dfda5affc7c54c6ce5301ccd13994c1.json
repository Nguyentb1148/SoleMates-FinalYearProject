{"ast":null,"code":"import axios from 'axios';\nconst baseLink = 'http://localhost:5163';\nconst authApi = axios.create({\n  baseURL: baseLink,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\nlet refreshingTokenPromise = null;\nauthApi.interceptors.response.use(response => response, async error => {\n  const originalRequest = error.config;\n  if (error.response.status === 401 && !originalRequest._retry) {\n    if (!refreshingTokenPromise) {\n      originalRequest._retry = true;\n      refreshingTokenPromise = authApi.post('/Account/refresh-token', {\n        Token: localStorage.getItem('refreshToken')\n      }).then(tokenResponse => {\n        if (tokenResponse.data && tokenResponse.data.accessToken) {\n          localStorage.setItem('accessToken', tokenResponse.data.accessToken);\n          console.log('New access token received: ', tokenResponse.data.accessToken);\n          authApi.defaults.headers['Authorization'] = `Bearer ${tokenResponse.data.accessToken}`;\n          originalRequest.headers['Authorization'] = `Bearer ${tokenResponse.data.accessToken}`;\n          return authApi(originalRequest);\n        }\n      }).finally(() => {\n        refreshingTokenPromise = null;\n      });\n    }\n    return refreshingTokenPromise;\n  }\n  return Promise.reject(error);\n});\nconst addNewAlbum = async data => {\n  try {\n    const response = await authApi.post(\"/Album\", data);\n    return response.data;\n  } catch (error) {\n    console.log('Error: ', error);\n    throw error;\n  }\n};\nconst getAllAlbumByUserId = async userId => {\n  try {\n    const response = await authApi.get(`/Album/user/${userId}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error:', error);\n    throw error;\n  }\n};\nconst addSongToAlbum = async (albumId, albumSongDto) => {\n  try {\n    const response = await authApi.post(`/Album/${albumId}/AddSong`, albumSongDto);\n    return response.data;\n  } catch (error) {\n    console.error('Error:', error);\n    throw error;\n  }\n};\nconst getAllSongsInAlbum = async albumId => {\n  try {\n    const response = await authApi.get(`/Album/${albumId}/Songs`);\n    return response.data;\n  } catch (error) {\n    console.error('Error:', error);\n    throw error;\n  }\n};\nconst getAlbumById = async albumId => {\n  try {\n    const response = await authApi.get(`/Album/${albumId}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error:', error);\n    throw error;\n  }\n};\nconst deleteAlbum = async albumId => {\n  try {\n    await authApi.delete(`/Album/${albumId}`);\n    return \"Album deleted successfully\";\n  } catch (error) {\n    console.error('Error:', error);\n    throw error;\n  }\n};\nconst removeSongFromAlbum = async (albumId, songId) => {\n  try {\n    await authApi.delete(`/Album/${albumId}/RemoveSong/${songId}`);\n    return \"Song removed from album successfully\";\n  } catch (error) {\n    console.error('Error:', error);\n    throw error;\n  }\n};\nexport { addNewAlbum, getAllAlbumByUserId, addSongToAlbum, getAllSongsInAlbum, getAlbumById, deleteAlbum, removeSongFromAlbum };","map":{"version":3,"names":["axios","baseLink","authApi","create","baseURL","headers","refreshingTokenPromise","interceptors","response","use","error","originalRequest","config","status","_retry","post","Token","localStorage","getItem","then","tokenResponse","data","accessToken","setItem","console","log","defaults","finally","Promise","reject","addNewAlbum","getAllAlbumByUserId","userId","get","addSongToAlbum","albumId","albumSongDto","getAllSongsInAlbum","getAlbumById","deleteAlbum","delete","removeSongFromAlbum","songId"],"sources":["/Users/nguyentran/Desktop/FYPProject/FrontEnd/src/Api/ArtistApi.js"],"sourcesContent":["import axios from 'axios';\n\nconst baseLink = 'http://localhost:5163';\n\nconst authApi = axios.create({\n    baseURL: baseLink,\n    headers: {\n        'Content-Type': 'application/json'\n    }\n});\n\nlet refreshingTokenPromise = null;\n\nauthApi.interceptors.response.use(\n    (response) => response,\n    async (error) => {\n        const originalRequest = error.config;\n        if (error.response.status === 401 && !originalRequest._retry) {\n            if (!refreshingTokenPromise) {\n                originalRequest._retry = true;\n                refreshingTokenPromise = authApi.post('/Account/refresh-token', { Token: localStorage.getItem('refreshToken') })\n                    .then(tokenResponse => {\n                        if (tokenResponse.data && tokenResponse.data.accessToken) {\n                            localStorage.setItem('accessToken', tokenResponse.data.accessToken);\n                            console.log('New access token received: ', tokenResponse.data.accessToken);\n                            authApi.defaults.headers['Authorization'] = `Bearer ${tokenResponse.data.accessToken}`;\n                            originalRequest.headers['Authorization'] = `Bearer ${tokenResponse.data.accessToken}`;\n                            return authApi(originalRequest);\n                        }\n                    }).finally(() => {\n                        refreshingTokenPromise = null;\n                    });\n            }\n            return refreshingTokenPromise;\n        }\n        return Promise.reject(error);\n    }\n);\n\nconst addNewAlbum = async (data) => {\n    try {\n        const response = await authApi.post(\"/Album\", data);\n        return response.data;\n    } catch (error) {\n        console.log('Error: ', error);\n        throw error;\n    }\n};\n\nconst getAllAlbumByUserId = async (userId) => {\n    try {\n        const response = await authApi.get(`/Album/user/${userId}`);\n        return response.data;\n    } catch (error) {\n        console.error('Error:', error);\n        throw error;\n    }\n};\n\nconst addSongToAlbum = async (albumId, albumSongDto) => {\n    try {\n        const response = await authApi.post(`/Album/${albumId}/AddSong`, albumSongDto);\n        return response.data;\n    } catch (error) {\n        console.error('Error:', error);\n        throw error;\n    }\n};\n\nconst getAllSongsInAlbum = async (albumId) => {\n    try {\n        const response = await authApi.get(`/Album/${albumId}/Songs`);\n        return response.data;\n    } catch (error) {\n        console.error('Error:', error);\n        throw error;\n    }\n};\n\nconst getAlbumById = async (albumId) => {\n    try {\n        const response = await authApi.get(`/Album/${albumId}`);\n        return response.data;\n    } catch (error) {\n        console.error('Error:', error);\n        throw error;\n    }\n};\n\nconst deleteAlbum = async (albumId) => {\n    try {\n        await authApi.delete(`/Album/${albumId}`);\n        return \"Album deleted successfully\";\n    } catch (error) {\n        console.error('Error:', error);\n        throw error;\n    }\n};\n\nconst removeSongFromAlbum = async (albumId, songId) => {\n    try {\n        await authApi.delete(`/Album/${albumId}/RemoveSong/${songId}`);\n        return \"Song removed from album successfully\";\n    } catch (error) {\n        console.error('Error:', error);\n        throw error;\n    }\n};\n\n\nexport  {addNewAlbum, getAllAlbumByUserId, addSongToAlbum, getAllSongsInAlbum, getAlbumById, deleteAlbum, removeSongFromAlbum};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}