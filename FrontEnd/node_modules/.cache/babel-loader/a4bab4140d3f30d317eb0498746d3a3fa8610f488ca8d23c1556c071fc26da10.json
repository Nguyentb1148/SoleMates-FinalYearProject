{"ast":null,"code":"var _jsxFileName = \"/Users/nguyentran/Desktop/FYPProject/FrontEnd/src/Pages/ListSong.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { getAllSongsByUserId } from '../Api/SongApi';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ListSong = () => {\n  _s();\n  const [songs, setSongs] = useState([]);\n  const user = JSON.parse(localStorage.getItem('user') || '{}'); // Parse the stored string to an object\n\n  useEffect(() => {\n    const fetchSongs = async () => {\n      try {\n        if (!user || !user.Id) {\n          console.error('User ID is missing');\n          // Handle missing user ID appropriately, e.g., show an error message\n          return;\n        }\n        const fetchedSongs = await getAllSongsByUserId(user.Id);\n        setSongs(fetchedSongs);\n      } catch (error) {\n        console.error('Error fetching songs:', error);\n      }\n    };\n    fetchSongs();\n  }, [user.Id]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Songs by User\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: songs.map(song => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Title:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 25\n        }, this), \" \", song.title, \" | \", /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Release Date:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 64\n        }, this), \" \", song.releaseDate]\n      }, song.songId, true, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 9\n  }, this);\n};\n_s(ListSong, \"VOyZriN/Fhf+BilZMpMEIr3tV0w=\");\n_c = ListSong;\nexport default ListSong;\nvar _c;\n$RefreshReg$(_c, \"ListSong\");","map":{"version":3,"names":["React","useState","useEffect","getAllSongsByUserId","jsxDEV","_jsxDEV","ListSong","_s","songs","setSongs","user","JSON","parse","localStorage","getItem","fetchSongs","Id","console","error","fetchedSongs","children","fileName","_jsxFileName","lineNumber","columnNumber","map","song","title","releaseDate","songId","_c","$RefreshReg$"],"sources":["/Users/nguyentran/Desktop/FYPProject/FrontEnd/src/Pages/ListSong.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { getAllSongsByUserId } from '../Api/SongApi';\n\nconst ListSong = () => {\n    const [songs, setSongs] = useState([]);\n    const user = JSON.parse(localStorage.getItem('user') || '{}'); // Parse the stored string to an object\n\n    useEffect(() => {\n        const fetchSongs = async () => {\n            try {\n                if (!user || !user.Id) {\n                    console.error('User ID is missing');\n                    // Handle missing user ID appropriately, e.g., show an error message\n                    return;\n                }\n                const fetchedSongs = await getAllSongsByUserId(user.Id);\n                setSongs(fetchedSongs);\n            } catch (error) {\n                console.error('Error fetching songs:', error);\n            }\n        };\n\n        fetchSongs();\n    }, [user.Id]);\n\n    return (\n        <div>\n            <h2>Songs by User</h2>\n            <ul>\n                {songs.map(song => (\n                    <li key={song.songId}>\n                        <strong>Title:</strong> {song.title} | <strong>Release Date:</strong> {song.releaseDate}\n                    </li>\n                ))}\n            </ul>\n        </div>\n    );\n};\n\nexport default ListSong;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,mBAAmB,QAAQ,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErD,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACnB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAMS,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,IAAI,IAAI,CAAC,CAAC,CAAC;;EAE/DZ,SAAS,CAAC,MAAM;IACZ,MAAMa,UAAU,GAAG,MAAAA,CAAA,KAAY;MAC3B,IAAI;QACA,IAAI,CAACL,IAAI,IAAI,CAACA,IAAI,CAACM,EAAE,EAAE;UACnBC,OAAO,CAACC,KAAK,CAAC,oBAAoB,CAAC;UACnC;UACA;QACJ;QACA,MAAMC,YAAY,GAAG,MAAMhB,mBAAmB,CAACO,IAAI,CAACM,EAAE,CAAC;QACvDP,QAAQ,CAACU,YAAY,CAAC;MAC1B,CAAC,CAAC,OAAOD,KAAK,EAAE;QACZD,OAAO,CAACC,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MACjD;IACJ,CAAC;IAEDH,UAAU,CAAC,CAAC;EAChB,CAAC,EAAE,CAACL,IAAI,CAACM,EAAE,CAAC,CAAC;EAEb,oBACIX,OAAA;IAAAe,QAAA,gBACIf,OAAA;MAAAe,QAAA,EAAI;IAAa;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACtBnB,OAAA;MAAAe,QAAA,EACKZ,KAAK,CAACiB,GAAG,CAACC,IAAI,iBACXrB,OAAA;QAAAe,QAAA,gBACIf,OAAA;UAAAe,QAAA,EAAQ;QAAM;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,KAAC,EAACE,IAAI,CAACC,KAAK,EAAC,KAAG,eAAAtB,OAAA;UAAAe,QAAA,EAAQ;QAAa;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,KAAC,EAACE,IAAI,CAACE,WAAW;MAAA,GADlFF,IAAI,CAACG,MAAM;QAAAR,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEhB,CACP;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACJ,CAAC;AAEd,CAAC;AAACjB,EAAA,CAlCID,QAAQ;AAAAwB,EAAA,GAARxB,QAAQ;AAoCd,eAAeA,QAAQ;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}