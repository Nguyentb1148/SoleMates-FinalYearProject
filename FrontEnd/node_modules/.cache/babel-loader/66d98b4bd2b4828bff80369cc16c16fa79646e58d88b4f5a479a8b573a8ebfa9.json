{"ast":null,"code":"import axios from 'axios';\nconst baseLink = 'http://localhost:5163';\nconst authApi = axios.create({\n  baseURL: baseLink,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// authApi.interceptors.request.use((config) => {\n//     console.log(\"Interceptor hit for URL:\", config.url); // Debugging\n//     const token = localStorage.getItem('accessToken');\n//     if (token) {\n//         config.headers.Authorization = `Bearer ${token}`;\n//     }\n//     return config;\n// }, (error) => {\n//     return Promise.reject(error);\n// });\n// authApi.interceptors.response.use(\n//     (response) => response, // On success, just return the response\n//     async (error) => {\n//         const originalRequest = error.config;\n//         if (error.response.status === 401 && !originalRequest._retry) {\n//             originalRequest._retry = true; // Mark this request as already tried\n//             const refreshToken = localStorage.getItem('refreshToken');\n//             console.log('refresh token get from local storage: ',refreshToken)\n//             try {\n//                 const tokenResponse = await authApi.post('/Account/refresh-token', { Token: refreshToken });\n//                 if (tokenResponse.data && tokenResponse.data) {\n//                     console.log('New access token received: ', tokenResponse.data.accessToken);\n//                     localStorage.setItem('accessToken', tokenResponse.data.accessToken);\n//                     originalRequest.headers['Authorization'] = `Bearer ${tokenResponse.data.accessToken}`;\n//                     return authApi(originalRequest); // Retry the original request with the new token\n//                 }\n//             } catch (refreshError) {\n//                 console.error('Error refreshing token: ', refreshError);\n//                 return Promise.reject(refreshError);\n//             }\n//         }\n//         return Promise.reject(error);\n//     }\n// );\n\nlet refreshingTokenPromise = null;\nauthApi.interceptors.response.use(response => response, async error => {\n  const originalRequest = error.config;\n  if (error.response.status === 401 && !originalRequest._retry) {\n    if (!refreshingTokenPromise) {\n      originalRequest._retry = true;\n      refreshingTokenPromise = authApi.post('/Account/refresh-token', {\n        Token: localStorage.getItem('refreshToken')\n      }).then(tokenResponse => {\n        if (tokenResponse.data && tokenResponse.data.accessToken) {\n          localStorage.setItem('accessToken', tokenResponse.data.accessToken);\n          console.log('New access token received: ', tokenResponse.data.accessToken);\n          authApi.defaults.headers['Authorization'] = `Bearer ${tokenResponse.data.accessToken}`;\n          originalRequest.headers['Authorization'] = `Bearer ${tokenResponse.data.accessToken}`;\n          return authApi(originalRequest);\n        }\n      }).finally(() => {\n        refreshingTokenPromise = null;\n      });\n    }\n    return refreshingTokenPromise;\n  }\n  return Promise.reject(error);\n});\nconst getSongById = async id => {\n  try {\n    const response = await authApi.get(`/Song/${id}`);\n    console.log(\"get song by id \", response.data);\n    return response.data;\n  } catch (error) {\n    console.error('Error:', error);\n    throw error;\n  }\n};\nconst deleteSongById = async id => {\n  try {\n    const response = await authApi.delete(`/Song/${id}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error:', error);\n    throw error;\n  }\n};\nconst getAllSongsByUserId = async userId => {\n  try {\n    const response = await authApi.get(`/Song/user/${userId}`);\n    const songs = response.data;\n    const pageSize = 10;\n    const paginatedSongs = [];\n    for (let i = 0; i < songs.length; i += pageSize) {\n      paginatedSongs.push(songs.slice(i, i + pageSize));\n    }\n    console.log(\"get song by id \", songs);\n    return paginatedSongs;\n  } catch (error) {\n    console.error('Error:', error);\n    throw error;\n  }\n};\nconst getAllSongs = async () => {\n  try {\n    const response = await authApi.get('/Song');\n    return response.data;\n  } catch (error) {\n    console.error('Error:', error);\n    throw error;\n  }\n};\n\n// Function to search songs by title\nconst searchByTitle = async title => {\n  try {\n    const response = await authApi.get('/Song/search', {\n      params: {\n        title\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error:', error);\n    throw error;\n  }\n};\nconst addNewSong = async songData => {\n  try {\n    const response = await authApi.post('/Song', songData);\n    return response.data;\n  } catch (error) {\n    console.error('Error:', error);\n    throw error;\n  }\n};\nconst updateSongById = async (id, updatedSongData) => {\n  try {\n    const response = await authApi.put(`/Song/${id}`, updatedSongData);\n    return response.data;\n  } catch (error) {\n    console.error('Error:', error);\n    throw error;\n  }\n};\nconst login = async credentials => {\n  try {\n    const response = await authApi.post('/Account/login', credentials);\n    localStorage.setItem('accessToken', response.data.accessToken);\n    localStorage.setItem('refreshToken', response.data.refreshToken);\n    localStorage.setItem('user', response.data.user);\n    localStorage.setItem('role', response.data.role);\n    console.log('User logged in successfully.');\n    return response.data; // Return the response data\n  } catch (error) {\n    console.error('Error:', error);\n    throw error; // Throwing the error for further handling if necessary\n  }\n};\nconst register = async userData => {\n  try {\n    console.log(\"Register data\", userData);\n    const response = await authApi.post('/Account/register', userData);\n    return response.data;\n  } catch (error) {\n    console.error('Error:', error);\n    throw error;\n  }\n};\nconst getAuthorizedMessage = async () => {\n  try {\n    const response = await authApi.get('/User/authorized');\n    return response.data.message;\n  } catch (error) {\n    console.error('Error:', error);\n    throw error;\n  }\n};\nconst getUserOnlyMessage = async () => {\n  try {\n    const response = await authApi.get('/User/user-only');\n    return response.data.message;\n  } catch (error) {\n    console.error('Error:', error);\n    throw error;\n  }\n};\nconst getAdminAuthorizedMessage = async () => {\n  try {\n    const response = await authApi.get('/Admin/authorized');\n    return response.data.message;\n  } catch (error) {\n    console.error('Error:', error);\n    throw error;\n  }\n};\nconst getAdminOnlyMessage = async () => {\n  try {\n    const response = await authApi.get('/Admin/admin-only');\n    return response.data.message;\n  } catch (error) {\n    console.error('Error:', error);\n    throw error;\n  }\n};\nconst getArtistAuthorizedMessage = async () => {\n  try {\n    const response = await authApi.get('/Artist/authorized');\n    return response.data.message;\n  } catch (error) {\n    console.error('Error:', error);\n    throw error;\n  }\n};\nconst getArtistOnlyMessage = async () => {\n  try {\n    const response = await authApi.get('/Artist/artist-only');\n    return response.data.message;\n  } catch (error) {\n    console.error('Error:', error);\n    throw error;\n  }\n};\nexport { getSongById, deleteSongById, getAllSongsByUserId, getAllSongs, searchByTitle, addNewSong, updateSongById, login, register, getAuthorizedMessage, getUserOnlyMessage, getAdminAuthorizedMessage, getAdminOnlyMessage, getArtistAuthorizedMessage, getArtistOnlyMessage };","map":{"version":3,"names":["axios","baseLink","authApi","create","baseURL","headers","refreshingTokenPromise","interceptors","response","use","error","originalRequest","config","status","_retry","post","Token","localStorage","getItem","then","tokenResponse","data","accessToken","setItem","console","log","defaults","finally","Promise","reject","getSongById","id","get","deleteSongById","delete","getAllSongsByUserId","userId","songs","pageSize","paginatedSongs","i","length","push","slice","getAllSongs","searchByTitle","title","params","addNewSong","songData","updateSongById","updatedSongData","put","login","credentials","refreshToken","user","role","register","userData","getAuthorizedMessage","message","getUserOnlyMessage","getAdminAuthorizedMessage","getAdminOnlyMessage","getArtistAuthorizedMessage","getArtistOnlyMessage"],"sources":["/Users/nguyentran/Desktop/FYPProject/FrontEnd/src/Api/AuthApi.js"],"sourcesContent":["import axios from 'axios';\n\nconst baseLink = 'http://localhost:5163';\n\nconst authApi = axios.create({\n    baseURL: baseLink,\n    headers: {\n        'Content-Type': 'application/json'\n    }\n});\n\n// authApi.interceptors.request.use((config) => {\n//     console.log(\"Interceptor hit for URL:\", config.url); // Debugging\n//     const token = localStorage.getItem('accessToken');\n//     if (token) {\n//         config.headers.Authorization = `Bearer ${token}`;\n//     }\n//     return config;\n// }, (error) => {\n//     return Promise.reject(error);\n// });\n// authApi.interceptors.response.use(\n//     (response) => response, // On success, just return the response\n//     async (error) => {\n//         const originalRequest = error.config;\n//         if (error.response.status === 401 && !originalRequest._retry) {\n//             originalRequest._retry = true; // Mark this request as already tried\n//             const refreshToken = localStorage.getItem('refreshToken');\n//             console.log('refresh token get from local storage: ',refreshToken)\n//             try {\n//                 const tokenResponse = await authApi.post('/Account/refresh-token', { Token: refreshToken });\n//                 if (tokenResponse.data && tokenResponse.data) {\n//                     console.log('New access token received: ', tokenResponse.data.accessToken);\n//                     localStorage.setItem('accessToken', tokenResponse.data.accessToken);\n//                     originalRequest.headers['Authorization'] = `Bearer ${tokenResponse.data.accessToken}`;\n//                     return authApi(originalRequest); // Retry the original request with the new token\n//                 }\n//             } catch (refreshError) {\n//                 console.error('Error refreshing token: ', refreshError);\n//                 return Promise.reject(refreshError);\n//             }\n//         }\n//         return Promise.reject(error);\n//     }\n// );\n\nlet refreshingTokenPromise = null;\n\nauthApi.interceptors.response.use(\n    (response) => response,\n    async (error) => {\n        const originalRequest = error.config;\n        if (error.response.status === 401 && !originalRequest._retry) {\n            if (!refreshingTokenPromise) {\n                originalRequest._retry = true;\n                refreshingTokenPromise = authApi.post('/Account/refresh-token', { Token: localStorage.getItem('refreshToken') })\n                    .then(tokenResponse => {\n                        if (tokenResponse.data && tokenResponse.data.accessToken) {\n                            localStorage.setItem('accessToken', tokenResponse.data.accessToken);\n                            console.log('New access token received: ', tokenResponse.data.accessToken);\n                            authApi.defaults.headers['Authorization'] = `Bearer ${tokenResponse.data.accessToken}`;\n                            originalRequest.headers['Authorization'] = `Bearer ${tokenResponse.data.accessToken}`;\n                            return authApi(originalRequest);\n                        }\n                    }).finally(() => {\n                        refreshingTokenPromise = null;\n                    });\n            }\n            return refreshingTokenPromise;\n        }\n        return Promise.reject(error);\n    }\n);\n\n\nconst getSongById = async (id) => {\n    try {\n        const response = await authApi.get(`/Song/${id}`);\n        console.log(\"get song by id \",response.data)\n        return response.data;\n    } catch (error) {\n        console.error('Error:', error);\n        throw error;\n    }\n};\n\n\nconst deleteSongById = async (id) => {\n    try {\n        const response = await authApi.delete(`/Song/${id}`);\n        return response.data;\n    } catch (error) {\n        console.error('Error:', error);\n        throw error;\n    }\n};\nconst getAllSongsByUserId = async (userId) => {\n    try {\n        const response = await authApi.get(`/Song/user/${userId}`);\n        const songs = response.data;\n        const pageSize = 10;\n        const paginatedSongs = [];\n        for (let i = 0; i < songs.length; i += pageSize) {\n            paginatedSongs.push(songs.slice(i, i + pageSize));\n        }\n        console.log(\"get song by id \",songs)\n        return paginatedSongs;\n    } catch (error) {\n        console.error('Error:', error);\n        throw error;\n    }\n}\n\nconst getAllSongs = async () => {\n    try {\n        const response = await authApi.get('/Song');\n        return response.data;\n    } catch (error) {\n        console.error('Error:', error);\n        throw error;\n    }\n};\n\n// Function to search songs by title\nconst searchByTitle = async (title) => {\n    try {\n        const response = await authApi.get('/Song/search', {\n            params: { title }\n        });\n        return response.data;\n    } catch (error) {\n        console.error('Error:', error);\n        throw error;\n    }\n};\n\nconst addNewSong = async (songData) => {\n    try {\n        const response = await authApi.post('/Song', songData);\n        return response.data;\n    } catch (error) {\n        console.error('Error:', error);\n        throw error;\n    }\n};\n\nconst updateSongById = async (id, updatedSongData) => {\n    try {\n        const response = await authApi.put(`/Song/${id}`, updatedSongData);\n        return response.data;\n    } catch (error) {\n        console.error('Error:', error);\n        throw error;\n    }\n};\n\nconst login = async (credentials) => {\n    try {\n        const response = await authApi.post('/Account/login', credentials);\n        localStorage.setItem('accessToken', response.data.accessToken);\n        localStorage.setItem('refreshToken', response.data.refreshToken);\n        localStorage.setItem('user',response.data.user)\n        localStorage.setItem('role',response.data.role)\n        console.log('User logged in successfully.');\n        return response.data; // Return the response data\n    } catch (error) {\n        console.error('Error:', error);\n        throw error; // Throwing the error for further handling if necessary\n    }\n};\nconst register = async (userData) => {\n    try {\n        console.log(\"Register data\", userData);\n        const response = await authApi.post('/Account/register', userData);\n        return response.data;\n    } catch (error) {\n        console.error('Error:', error);\n        throw error;\n    }\n};\nconst getAuthorizedMessage = async () => {\n    try {\n        const response = await authApi.get('/User/authorized');\n        return response.data.message;\n    } catch (error) {\n        console.error('Error:', error);\n        throw error;\n    }\n};\nconst getUserOnlyMessage = async () => {\n    try {\n        const response = await authApi.get('/User/user-only');\n        return response.data.message;\n    } catch (error) {\n        console.error('Error:', error);\n        throw error;\n    }\n};\nconst getAdminAuthorizedMessage = async () => {\n    try {\n        const response = await authApi.get('/Admin/authorized');\n        return response.data.message;\n    } catch (error) {\n        console.error('Error:', error);\n        throw error;\n    }\n}\nconst getAdminOnlyMessage = async () => {\n    try {\n        const response = await authApi.get('/Admin/admin-only');\n        return response.data.message;\n    } catch (error) {\n        console.error('Error:', error);\n        throw error;\n    }\n};\nconst getArtistAuthorizedMessage = async () => {\n    try {\n        const response = await authApi.get('/Artist/authorized');\n        return response.data.message;\n    } catch (error) {\n        console.error('Error:', error);\n        throw error;\n    }\n};\nconst getArtistOnlyMessage = async () => {\n    try {\n        const response = await authApi.get('/Artist/artist-only');\n        return response.data.message;\n    } catch (error) {\n        console.error('Error:', error);\n        throw error;\n    }\n};\n\n\nexport{ getSongById,deleteSongById,getAllSongsByUserId,getAllSongs,searchByTitle,addNewSong, updateSongById,login, register,getAuthorizedMessage,getUserOnlyMessage,getAdminAuthorizedMessage,getAdminOnlyMessage,getArtistAuthorizedMessage,getArtistOnlyMessage };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}