{"ast":null,"code":"import authApi from './AxiosConfig';\nconst addOrder = async orderInfo => {\n  try {\n    const response = await authApi.post(`/Order`, orderInfo);\n    return response.data.id;\n  } catch (error) {\n    console.error('Error adding order:', error);\n    throw error;\n  }\n};\nconst processOrder = async (orderId, totalPrice) => {\n  try {\n    console.log(\"Value of totalAmount 2:\", totalPrice);\n    console.log(\"Data type of totalAmount 2:\", typeof totalPrice);\n    const paypalResponse = await createPayPalPayment(totalPrice);\n    await updateOrderWithPayPalPaymentId(orderId, paypalResponse.id);\n    window.location.href = paypalResponse.links.find(link => link.rel === 'approval_url').href;\n  } catch (error) {\n    console.error('Error processing order:', error);\n    throw error;\n  }\n};\nconst createPayPalPayment = async totalAmount => {\n  try {\n    const parsedTotalAmount = parseFloat(totalAmount).toFixed(2);\n    console.log(\"Value of totalAmount 3:\", parsedTotalAmount);\n    console.log(\"Data type of totalAmount 3:\", typeof parsedTotalAmount);\n    if (isNaN(parsedTotalAmount) || parsedTotalAmount <= 0) {\n      throw new Error('Invalid totalAmount value');\n    }\n    const response = await authApi.post('/PayPal/CreatePayment', {\n      totalAmount: parsedTotalAmount\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error creating PayPal payment:', error);\n    throw error;\n  }\n};\nconst updateOrderWithPayPalPaymentId = async (orderId, paypalPaymentId) => {\n  try {\n    await authApi.put(`/Order/${orderId}`, {\n      paypalPaymentId\n    });\n  } catch (error) {\n    console.error('Error updating order with PayPal payment ID:', error);\n    throw error;\n  }\n};\nexport { addOrder, processOrder };","map":{"version":3,"names":["authApi","addOrder","orderInfo","response","post","data","id","error","console","processOrder","orderId","totalPrice","log","paypalResponse","createPayPalPayment","updateOrderWithPayPalPaymentId","window","location","href","links","find","link","rel","totalAmount","parsedTotalAmount","parseFloat","toFixed","isNaN","Error","paypalPaymentId","put"],"sources":["/Users/nguyentran/Desktop/FYPProject/FrontEnd/src/utils/Api/OrderApi.js"],"sourcesContent":["import authApi from './AxiosConfig';\n\nconst addOrder = async (orderInfo) => {\n    try {\n        const response = await authApi.post(`/Order`, orderInfo);\n        return response.data.id;\n    } catch (error) {\n        console.error('Error adding order:', error);\n        throw error;\n    }\n};\n\nconst processOrder = async (orderId, totalPrice) => {\n    try {\n        console.log(\"Value of totalAmount 2:\", totalPrice);\n        console.log(\"Data type of totalAmount 2:\", typeof totalPrice);\n\n        const paypalResponse = await createPayPalPayment(totalPrice);\n        await updateOrderWithPayPalPaymentId(orderId, paypalResponse.id);\n        window.location.href = paypalResponse.links.find(link => link.rel === 'approval_url').href;\n    } catch (error) {\n        console.error('Error processing order:', error);\n        throw error;\n    }\n};\n\nconst createPayPalPayment = async (totalAmount) => {\n    try {\n        const parsedTotalAmount = parseFloat(totalAmount).toFixed(2);\n        console.log(\"Value of totalAmount 3:\", parsedTotalAmount);\n        console.log(\"Data type of totalAmount 3:\", typeof parsedTotalAmount);\n        if (isNaN(parsedTotalAmount) || parsedTotalAmount <= 0) {\n            throw new Error('Invalid totalAmount value');\n        }\n\n        const response = await authApi.post('/PayPal/CreatePayment', { totalAmount: parsedTotalAmount });\n        return response.data;\n    } catch (error) {\n        console.error('Error creating PayPal payment:', error);\n        throw error;\n    }\n};\n\nconst updateOrderWithPayPalPaymentId = async (orderId, paypalPaymentId) => {\n    try {\n        await authApi.put(`/Order/${orderId}`, { paypalPaymentId });\n    } catch (error) {\n        console.error('Error updating order with PayPal payment ID:', error);\n        throw error;\n    }\n};\n\nexport { addOrder, processOrder };\n"],"mappings":"AAAA,OAAOA,OAAO,MAAM,eAAe;AAEnC,MAAMC,QAAQ,GAAG,MAAOC,SAAS,IAAK;EAClC,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMH,OAAO,CAACI,IAAI,CAAE,QAAO,EAAEF,SAAS,CAAC;IACxD,OAAOC,QAAQ,CAACE,IAAI,CAACC,EAAE;EAC3B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;IAC3C,MAAMA,KAAK;EACf;AACJ,CAAC;AAED,MAAME,YAAY,GAAG,MAAAA,CAAOC,OAAO,EAAEC,UAAU,KAAK;EAChD,IAAI;IACAH,OAAO,CAACI,GAAG,CAAC,yBAAyB,EAAED,UAAU,CAAC;IAClDH,OAAO,CAACI,GAAG,CAAC,6BAA6B,EAAE,OAAOD,UAAU,CAAC;IAE7D,MAAME,cAAc,GAAG,MAAMC,mBAAmB,CAACH,UAAU,CAAC;IAC5D,MAAMI,8BAA8B,CAACL,OAAO,EAAEG,cAAc,CAACP,EAAE,CAAC;IAChEU,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAGL,cAAc,CAACM,KAAK,CAACC,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACC,GAAG,KAAK,cAAc,CAAC,CAACJ,IAAI;EAC9F,CAAC,CAAC,OAAOX,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IAC/C,MAAMA,KAAK;EACf;AACJ,CAAC;AAED,MAAMO,mBAAmB,GAAG,MAAOS,WAAW,IAAK;EAC/C,IAAI;IACA,MAAMC,iBAAiB,GAAGC,UAAU,CAACF,WAAW,CAAC,CAACG,OAAO,CAAC,CAAC,CAAC;IAC5DlB,OAAO,CAACI,GAAG,CAAC,yBAAyB,EAAEY,iBAAiB,CAAC;IACzDhB,OAAO,CAACI,GAAG,CAAC,6BAA6B,EAAE,OAAOY,iBAAiB,CAAC;IACpE,IAAIG,KAAK,CAACH,iBAAiB,CAAC,IAAIA,iBAAiB,IAAI,CAAC,EAAE;MACpD,MAAM,IAAII,KAAK,CAAC,2BAA2B,CAAC;IAChD;IAEA,MAAMzB,QAAQ,GAAG,MAAMH,OAAO,CAACI,IAAI,CAAC,uBAAuB,EAAE;MAAEmB,WAAW,EAAEC;IAAkB,CAAC,CAAC;IAChG,OAAOrB,QAAQ,CAACE,IAAI;EACxB,CAAC,CAAC,OAAOE,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;IACtD,MAAMA,KAAK;EACf;AACJ,CAAC;AAED,MAAMQ,8BAA8B,GAAG,MAAAA,CAAOL,OAAO,EAAEmB,eAAe,KAAK;EACvE,IAAI;IACA,MAAM7B,OAAO,CAAC8B,GAAG,CAAE,UAASpB,OAAQ,EAAC,EAAE;MAAEmB;IAAgB,CAAC,CAAC;EAC/D,CAAC,CAAC,OAAOtB,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,8CAA8C,EAAEA,KAAK,CAAC;IACpE,MAAMA,KAAK;EACf;AACJ,CAAC;AAED,SAASN,QAAQ,EAAEQ,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}