{"ast":null,"code":"var _jsxFileName = \"/Users/nguyentran/Desktop/FYPProject/FrontEnd/src/Pages/Album/EditAlbum.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { getAlbumById, getAllSongsInAlbum, addSongToAlbum, deleteAlbum, removeSongFromAlbum } from '../../Api/ArtistApi';\nimport { getAllSongsByUserId } from '../../Api/SongApi'; // Import the function to fetch all songs by user ID\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EditAlbum = () => {\n  _s();\n  const [album, setAlbum] = useState(null);\n  const [songs, setSongs] = useState([]);\n  const [allUserSongs, setAllUserSongs] = useState([]);\n  const [selectedSongs, setSelectedSongs] = useState(new Set());\n  const [showAddSongModal, setShowAddSongModal] = useState(false);\n  const {\n    albumId\n  } = useParams();\n  const navigate = useNavigate();\n  const user = JSON.parse(localStorage.getItem('user') || '{}');\n  useEffect(() => {\n    loadAlbum();\n    loadSongs();\n    loadUserSongs();\n  }, [albumId]);\n  const loadAlbum = async () => {\n    const fetchedAlbum = await getAlbumById(albumId);\n    setAlbum(fetchedAlbum);\n  };\n  const loadSongs = async () => {\n    const fetchedSongs = await getAllSongsInAlbum(albumId);\n    setSongs(fetchedSongs);\n  };\n  const loadUserSongs = async () => {\n    const fetchedSongs = await getAllSongsByUserId(user.Id);\n    setAllUserSongs(fetchedSongs.flat()); // Assuming your API returns nested arrays of songs\n  };\n  const handleAddSongsToAlbum = async () => {\n    const songIdsArray = Array.from(selectedSongs);\n    const albumSongDto = {\n      AlbumId: albumId,\n      // This might be redundant since AlbumId is already in the URL\n      SongIds: songIdsArray\n    };\n    try {\n      await addSongToAlbum(albumId, albumSongDto);\n      setShowAddSongModal(false); // Close modal after adding songs\n      loadSongs(); // Refresh songs list in the album\n    } catch (error) {\n      console.error('Error adding songs to album:', error);\n    }\n  };\n  const handleSelectSong = songId => {\n    const newSelectedSongs = new Set(selectedSongs);\n    if (newSelectedSongs.has(songId)) {\n      newSelectedSongs.delete(songId);\n    } else {\n      newSelectedSongs.add(songId);\n    }\n    setSelectedSongs(newSelectedSongs);\n  };\n  const handleRemoveSong = async songId => {\n    await removeSongFromAlbum(albumId, songId);\n    loadSongs();\n  };\n  const handleDeleteAlbum = async () => {\n    await deleteAlbum(albumId);\n    navigate('/ListAlbum');\n  };\n  if (!album) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Edit Album: \", album.nameOfAlbum]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Songs in Album\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }, this), Array.isArray(songs) && songs.map(song => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [song.title, /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleRemoveSong(song.songId),\n          children: \"Remove\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 25\n        }, this)]\n      }, song.songId, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 21\n      }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setShowAddSongModal(true),\n        children: \"Add Songs\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleDeleteAlbum,\n      children: \"Delete Album\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }, this), showAddSongModal && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'absolute',\n        top: '20%',\n        left: '30%',\n        backgroundColor: 'white',\n        padding: '20px',\n        border: '1px solid black'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Select Songs to Add\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 21\n      }, this), allUserSongs.map(song => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          checked: selectedSongs.has(song.songId),\n          onChange: () => handleSelectSong(song.songId)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 29\n        }, this), song.title]\n      }, song.songId, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 25\n      }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleAddSongsToAlbum,\n        children: \"Add Selected Songs\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setShowAddSongModal(false),\n        children: \"Close\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 9\n  }, this);\n};\n_s(EditAlbum, \"ftKNwoXT9FSBG2jF/uwqzDQ9ms4=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = EditAlbum;\nexport default EditAlbum;\nvar _c;\n$RefreshReg$(_c, \"EditAlbum\");","map":{"version":3,"names":["React","useState","useEffect","useParams","useNavigate","getAlbumById","getAllSongsInAlbum","addSongToAlbum","deleteAlbum","removeSongFromAlbum","getAllSongsByUserId","jsxDEV","_jsxDEV","EditAlbum","_s","album","setAlbum","songs","setSongs","allUserSongs","setAllUserSongs","selectedSongs","setSelectedSongs","Set","showAddSongModal","setShowAddSongModal","albumId","navigate","user","JSON","parse","localStorage","getItem","loadAlbum","loadSongs","loadUserSongs","fetchedAlbum","fetchedSongs","Id","flat","handleAddSongsToAlbum","songIdsArray","Array","from","albumSongDto","AlbumId","SongIds","error","console","handleSelectSong","songId","newSelectedSongs","has","delete","add","handleRemoveSong","handleDeleteAlbum","children","fileName","_jsxFileName","lineNumber","columnNumber","nameOfAlbum","isArray","map","song","title","onClick","style","position","top","left","backgroundColor","padding","border","type","checked","onChange","_c","$RefreshReg$"],"sources":["/Users/nguyentran/Desktop/FYPProject/FrontEnd/src/Pages/Album/EditAlbum.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport {\n    getAlbumById,\n    getAllSongsInAlbum,\n    addSongToAlbum,\n    deleteAlbum,\n    removeSongFromAlbum,\n} from '../../Api/ArtistApi';\nimport { getAllSongsByUserId } from '../../Api/SongApi'; // Import the function to fetch all songs by user ID\n\nconst EditAlbum = () => {\n    const [album, setAlbum] = useState(null);\n    const [songs, setSongs] = useState([]);\n    const [allUserSongs, setAllUserSongs] = useState([]);\n    const [selectedSongs, setSelectedSongs] = useState(new Set());\n    const [showAddSongModal, setShowAddSongModal] = useState(false);\n    const { albumId } = useParams();\n    const navigate = useNavigate();\n    const user = JSON.parse(localStorage.getItem('user') || '{}');\n\n    useEffect(() => {\n        loadAlbum();\n        loadSongs();\n        loadUserSongs();\n    }, [albumId]);\n\n    const loadAlbum = async () => {\n        const fetchedAlbum = await getAlbumById(albumId);\n        setAlbum(fetchedAlbum);\n    };\n\n    const loadSongs = async () => {\n        const fetchedSongs = await getAllSongsInAlbum(albumId);\n        setSongs(fetchedSongs);\n    };\n\n    const loadUserSongs = async () => {\n        const fetchedSongs = await getAllSongsByUserId(user.Id);\n        setAllUserSongs(fetchedSongs.flat()); // Assuming your API returns nested arrays of songs\n    };\n\n    const handleAddSongsToAlbum = async () => {\n        const songIdsArray = Array.from(selectedSongs);\n        const albumSongDto = {\n            AlbumId: albumId, // This might be redundant since AlbumId is already in the URL\n            SongIds: songIdsArray\n        };\n\n        try {\n            await addSongToAlbum(albumId, albumSongDto);\n            setShowAddSongModal(false); // Close modal after adding songs\n            loadSongs(); // Refresh songs list in the album\n        } catch (error) {\n            console.error('Error adding songs to album:', error);\n        }\n    };\n\n\n    const handleSelectSong = (songId) => {\n        const newSelectedSongs = new Set(selectedSongs);\n        if (newSelectedSongs.has(songId)) {\n            newSelectedSongs.delete(songId);\n        } else {\n            newSelectedSongs.add(songId);\n        }\n        setSelectedSongs(newSelectedSongs);\n    };\n\n    const handleRemoveSong = async (songId) => {\n        await removeSongFromAlbum(albumId, songId);\n        loadSongs();\n    };\n\n    const handleDeleteAlbum = async () => {\n        await deleteAlbum(albumId);\n        navigate('/ListAlbum');\n    };\n\n    if (!album) {\n        return <div>Loading...</div>;\n    }\n\n    return (\n        <div>\n            <h1>Edit Album: {album.nameOfAlbum}</h1>\n            <div>\n                <h2>Songs in Album</h2>\n                {Array.isArray(songs) && songs.map((song) => (\n                    <div key={song.songId}>\n                        {song.title}\n                        <button onClick={() => handleRemoveSong(song.songId)}>Remove</button>\n                    </div>\n                ))}\n\n                <button onClick={() => setShowAddSongModal(true)}>Add Songs</button>\n            </div>\n            <button onClick={handleDeleteAlbum}>Delete Album</button>\n\n            {showAddSongModal && (\n                <div style={{ position: 'absolute', top: '20%', left: '30%', backgroundColor: 'white', padding: '20px', border: '1px solid black' }}>\n                    <h2>Select Songs to Add</h2>\n                    {allUserSongs.map((song) => (\n                        <div key={song.songId}>\n                            <input\n                                type=\"checkbox\"\n                                checked={selectedSongs.has(song.songId)}\n                                onChange={() => handleSelectSong(song.songId)}\n                            />\n                            {song.title}\n                        </div>\n                    ))}\n                    <button onClick={handleAddSongsToAlbum}>Add Selected Songs</button>\n                    <button onClick={() => setShowAddSongModal(false)}>Close</button>\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default EditAlbum;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}