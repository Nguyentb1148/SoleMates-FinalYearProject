{"ast":null,"code":"var _jsxFileName = \"/Users/nguyentran/Desktop/FYPProject/FrontEnd/src/Pages/Album/AddAlbum.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { ref, uploadBytes, getDownloadURL } from \"firebase/storage\";\nimport { storage } from \"../../firebase\";\nimport defaultAlbumImage from '../../Img/default-cover-art.png';\nimport { getAllSongsByUserId, addNewSong } from '../../Api/SongApi';\nimport { addNewAlbum } from '../../Api/ArtistApi';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AddAlbumPage = () => {\n  _s();\n  const [albumName, setAlbumName] = useState('');\n  const [albumImage, setAlbumImage] = useState(null);\n  const [imagePreview, setImagePreview] = useState(defaultAlbumImage);\n  const [selectedSongIds, setSelectedSongIds] = useState([]);\n  const [allUserSongs, setAllUserSongs] = useState([]);\n  const navigate = useNavigate();\n  const [showSongSelector, setShowSongSelector] = useState(false);\n  const user = JSON.parse(localStorage.getItem('user') || '{}'); // Replace with the actual user ID\n\n  useEffect(() => {\n    loadUserSongs();\n  }, []);\n  const loadUserSongs = async () => {\n    try {\n      const userSongs = await getAllSongsByUserId(user.Id);\n      setAllUserSongs(userSongs);\n    } catch (error) {\n      console.error('Error loading user songs:', error);\n    }\n  };\n  const handleImageChange = event => {\n    const file = event.target.files[0];\n    if (file) {\n      setAlbumImage(file);\n      const previewUrl = URL.createObjectURL(file);\n      setImagePreview(previewUrl);\n    }\n  };\n  const handleSongSelection = songId => {\n    setSelectedSongIds(prevIds => prevIds.includes(songId) ? prevIds.filter(id => id !== songId) : [...prevIds, songId]);\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!albumName || !albumImage || selectedSongIds.length === 0) {\n      alert('Please provide album name, image, and select at least one song.');\n      return;\n    }\n    const imageFileRef = ref(storage, `AlbumImages/${albumImage.name}`);\n    const uploadResult = await uploadBytes(imageFileRef, albumImage);\n    const imageURL = await getDownloadURL(uploadResult.ref);\n    const albumData = {\n      NameOfAlbum: albumName,\n      ImageAlbumUrl: imageURL,\n      SongIds: selectedSongIds\n    };\n    try {\n      const result = await addNewAlbum(albumData);\n      console.log(result);\n      alert('Album added successfully!');\n      navigate('/ListAlbum');\n    } catch (error) {\n      console.error('Error adding album:', error);\n      alert('Failed to add album.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Add New Album\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"albumName\",\n          children: \"Album Name *\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"albumName\",\n          type: \"text\",\n          value: albumName,\n          onChange: e => setAlbumName(e.target.value),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"albumImage\",\n          children: \"Album Image *\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"albumImage\",\n          type: \"file\",\n          accept: \"image/*\",\n          onChange: handleImageChange,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: imagePreview,\n          alt: \"Album Preview\",\n          style: {\n            maxWidth: '200px'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Select Songs for Album\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 21\n        }, this), allUserSongs.map(song => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              value: song.songId,\n              checked: selectedSongIds.includes(song.songId),\n              onChange: () => handleSongSelection(song.songId)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 108,\n              columnNumber: 33\n            }, this), song.title]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 29\n          }, this)\n        }, song.songId, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 25\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Add Album\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 9\n  }, this);\n};\n_s(AddAlbumPage, \"D/dY9BKx0DPOmUUuCsE4L2Wh2vw=\", false, function () {\n  return [useNavigate];\n});\n_c = AddAlbumPage;\nexport default AddAlbumPage;\nvar _c;\n$RefreshReg$(_c, \"AddAlbumPage\");","map":{"version":3,"names":["React","useEffect","useState","useNavigate","ref","uploadBytes","getDownloadURL","storage","defaultAlbumImage","getAllSongsByUserId","addNewSong","addNewAlbum","jsxDEV","_jsxDEV","AddAlbumPage","_s","albumName","setAlbumName","albumImage","setAlbumImage","imagePreview","setImagePreview","selectedSongIds","setSelectedSongIds","allUserSongs","setAllUserSongs","navigate","showSongSelector","setShowSongSelector","user","JSON","parse","localStorage","getItem","loadUserSongs","userSongs","Id","error","console","handleImageChange","event","file","target","files","previewUrl","URL","createObjectURL","handleSongSelection","songId","prevIds","includes","filter","id","handleSubmit","e","preventDefault","length","alert","imageFileRef","name","uploadResult","imageURL","albumData","NameOfAlbum","ImageAlbumUrl","SongIds","result","log","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","htmlFor","type","value","onChange","required","accept","src","alt","style","maxWidth","map","song","checked","title","_c","$RefreshReg$"],"sources":["/Users/nguyentran/Desktop/FYPProject/FrontEnd/src/Pages/Album/AddAlbum.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { ref, uploadBytes, getDownloadURL } from \"firebase/storage\";\nimport { storage } from \"../../firebase\";\nimport defaultAlbumImage from '../../Img/default-cover-art.png';\nimport { getAllSongsByUserId, addNewSong } from '../../Api/SongApi';\nimport { addNewAlbum } from '../../Api/ArtistApi';\n\nconst AddAlbumPage = () => {\n    const [albumName, setAlbumName] = useState('');\n    const [albumImage, setAlbumImage] = useState(null);\n    const [imagePreview, setImagePreview] = useState(defaultAlbumImage);\n    const [selectedSongIds, setSelectedSongIds] = useState([]);\n    const [allUserSongs, setAllUserSongs] = useState([]);\n    const navigate = useNavigate();\n    const [showSongSelector, setShowSongSelector] = useState(false);\n\n    const user = JSON.parse(localStorage.getItem('user') || '{}'); // Replace with the actual user ID\n\n    useEffect(() => {\n        loadUserSongs();\n    }, []);\n\n    const loadUserSongs = async () => {\n        try {\n            const userSongs = await getAllSongsByUserId(user.Id);\n            setAllUserSongs(userSongs);\n        } catch (error) {\n            console.error('Error loading user songs:', error);\n        }\n    };\n\n    const handleImageChange = (event) => {\n        const file = event.target.files[0];\n        if (file) {\n            setAlbumImage(file);\n            const previewUrl = URL.createObjectURL(file);\n            setImagePreview(previewUrl);\n        }\n    };\n\n    const handleSongSelection = (songId) => {\n        setSelectedSongIds(prevIds =>\n            prevIds.includes(songId)\n                ? prevIds.filter(id => id !== songId)\n                : [...prevIds, songId]\n        );\n    };\n\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n        if (!albumName || !albumImage || selectedSongIds.length === 0) {\n            alert('Please provide album name, image, and select at least one song.');\n            return;\n        }\n\n        const imageFileRef = ref(storage, `AlbumImages/${albumImage.name}`);\n        const uploadResult = await uploadBytes(imageFileRef, albumImage);\n        const imageURL = await getDownloadURL(uploadResult.ref);\n\n        const albumData = {\n            NameOfAlbum: albumName,\n            ImageAlbumUrl: imageURL,\n            SongIds: selectedSongIds\n        };\n\n        try {\n            const result = await addNewAlbum(albumData);\n            console.log(result);\n            alert('Album added successfully!');\n            navigate('/ListAlbum');\n        } catch (error) {\n            console.error('Error adding album:', error);\n            alert('Failed to add album.');\n        }\n    };\n\n    return (\n        <div>\n            <h2>Add New Album</h2>\n            <form onSubmit={handleSubmit}>\n                <div>\n                    <label htmlFor=\"albumName\">Album Name *</label>\n                    <input\n                        id=\"albumName\"\n                        type=\"text\"\n                        value={albumName}\n                        onChange={(e) => setAlbumName(e.target.value)}\n                        required\n                    />\n                </div>\n                <div>\n                    <label htmlFor=\"albumImage\">Album Image *</label>\n                    <input\n                        id=\"albumImage\"\n                        type=\"file\"\n                        accept=\"image/*\"\n                        onChange={handleImageChange}\n                        required\n                    />\n                    <img src={imagePreview} alt=\"Album Preview\" style={{ maxWidth: '200px' }} />\n                </div>\n                <div>\n                    <h3>Select Songs for Album</h3>\n                    {allUserSongs.map(song => (\n                        <div key={song.songId}>\n                            <label>\n                                <input\n                                    type=\"checkbox\"\n                                    value={song.songId}\n                                    checked={selectedSongIds.includes(song.songId)}\n                                    onChange={() => handleSongSelection(song.songId)}\n                                />\n                                {song.title}\n                            </label>\n                        </div>\n                    ))}\n                </div>\n                <button type=\"submit\">Add Album</button>\n            </form>\n        </div>\n    );\n};\n\nexport default AddAlbumPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}