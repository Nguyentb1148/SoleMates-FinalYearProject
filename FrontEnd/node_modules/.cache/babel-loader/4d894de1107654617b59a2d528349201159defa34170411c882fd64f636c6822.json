{"ast":null,"code":"import axios from 'axios';\nconst baseLink = 'http://localhost:5163';\nconst authApi = axios.create({\n  baseURL: baseLink,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\nauthApi.interceptors.request.use(config => {\n  console.log(\"Interceptor hit for URL:\", config.url); // Debugging\n  const token = localStorage.getItem('accessToken');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Example function to check if the token has expired and refresh it\nasync function checkAndRefreshToken(apiResponse) {\n  if (apiResponse.status === 401 && apiResponse.headers.get('Token-Expired')) {\n    // Assume getRefreshToken() retrieves the stored refresh token\n    const refreshToken = getRefreshToken();\n    const refreshResponse = await fetch('/Account/refresh-token', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        Token: refreshToken\n      })\n    });\n    if (refreshResponse.ok) {\n      const data = await refreshResponse.json();\n      // Assume saveAccessToken() securely saves the new access token\n      saveAccessToken(data.AccessToken);\n      // Optionally retry the original request with the new token here\n    } else {\n      // Handle refresh token failure (e.g., prompt re-login)\n    }\n  }\n}\nconst login = async credentials => {\n  try {\n    const response = await axios.post('http://localhost:5163/Account/login', credentials);\n    localStorage.setItem('accessToken', response.data.accessToken);\n    localStorage.setItem('refreshToken', response.data.refreshToken);\n    localStorage.setItem('user', response.data.user);\n    localStorage.setItem('role', response.data.role);\n    console.log('User logged in successfully.');\n    return response.data; // Return the response data\n  } catch (error) {\n    console.error('Error:', error);\n    throw error; // Throwing the error for further handling if necessary\n  }\n};\nconst register = async userData => {\n  try {\n    console.log(\"Register data\", userData);\n    const response = await authApi.post('/Account/register', userData);\n    return response.data;\n  } catch (error) {\n    console.error('Error:', error);\n    throw error;\n  }\n};\nconst getAuthorizedMessage = async () => {\n  try {\n    const response = await authApi.get('/User/authorized');\n    return response.data.message;\n  } catch (error) {\n    console.error('Error:', error);\n    throw error;\n  }\n};\nconst getUserOnlyMessage = async () => {\n  try {\n    const response = await authApi.get('/User/user-only');\n    return response.data.message;\n  } catch (error) {\n    console.error('Error:', error);\n    throw error;\n  }\n};\nexport { login, register, getAuthorizedMessage, getUserOnlyMessage };","map":{"version":3,"names":["axios","baseLink","authApi","create","baseURL","headers","interceptors","request","use","config","console","log","url","token","localStorage","getItem","Authorization","error","Promise","reject","checkAndRefreshToken","apiResponse","status","get","refreshToken","getRefreshToken","refreshResponse","fetch","method","body","JSON","stringify","Token","ok","data","json","saveAccessToken","AccessToken","login","credentials","response","post","setItem","accessToken","user","role","register","userData","getAuthorizedMessage","message","getUserOnlyMessage"],"sources":["/Users/nguyentran/Desktop/FYPProject/FrontEnd/src/Api/AuthApi.js"],"sourcesContent":["import axios from 'axios';\n\nconst baseLink = 'http://localhost:5163';\n\nconst authApi = axios.create({\n    baseURL: baseLink,\n    headers: {\n        'Content-Type': 'application/json'\n    }\n});\n\nauthApi.interceptors.request.use((config) => {\n    console.log(\"Interceptor hit for URL:\", config.url); // Debugging\n    const token = localStorage.getItem('accessToken');\n    if (token) {\n        config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n}, (error) => {\n    return Promise.reject(error);\n});\n\n// Example function to check if the token has expired and refresh it\nasync function checkAndRefreshToken(apiResponse) {\n    if (apiResponse.status === 401 && apiResponse.headers.get('Token-Expired')) {\n        // Assume getRefreshToken() retrieves the stored refresh token\n        const refreshToken = getRefreshToken();\n        const refreshResponse = await fetch('/Account/refresh-token', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({ Token: refreshToken })\n        });\n\n        if (refreshResponse.ok) {\n            const data = await refreshResponse.json();\n            // Assume saveAccessToken() securely saves the new access token\n            saveAccessToken(data.AccessToken);\n            // Optionally retry the original request with the new token here\n        } else {\n            // Handle refresh token failure (e.g., prompt re-login)\n        }\n    }\n}\n\nconst login = async (credentials) => {\n    try {\n        const response = await axios.post('http://localhost:5163/Account/login', credentials);\n        localStorage.setItem('accessToken', response.data.accessToken);\n        localStorage.setItem('refreshToken', response.data.refreshToken);\n        localStorage.setItem('user',response.data.user)\n        localStorage.setItem('role',response.data.role)\n        console.log('User logged in successfully.');\n        return response.data; // Return the response data\n    } catch (error) {\n        console.error('Error:', error);\n        throw error; // Throwing the error for further handling if necessary\n    }\n};\n\nconst register = async (userData) => {\n    try {\n        console.log(\"Register data\", userData);\n        const response = await authApi.post('/Account/register', userData);\n        return response.data;\n    } catch (error) {\n        console.error('Error:', error);\n        throw error;\n    }\n};\nconst getAuthorizedMessage = async () => {\n    try {\n        const response = await authApi.get('/User/authorized');\n        return response.data.message;\n    } catch (error) {\n        console.error('Error:', error);\n        throw error;\n    }\n};\n\nconst getUserOnlyMessage = async () => {\n    try {\n        const response = await authApi.get('/User/user-only');\n        return response.data.message;\n    } catch (error) {\n        console.error('Error:', error);\n        throw error;\n    }\n};\nexport { login, register,getAuthorizedMessage,getUserOnlyMessage };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}