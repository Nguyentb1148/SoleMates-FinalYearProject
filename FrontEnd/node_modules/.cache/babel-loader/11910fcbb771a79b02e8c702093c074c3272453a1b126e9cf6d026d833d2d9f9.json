{"ast":null,"code":"import authApi from './AxiosConfig';\nconst addOrder = async orderInfo => {\n  try {\n    const response = await authApi.post(`/Order`, orderInfo);\n    return response.data.orderId;\n  } catch (error) {\n    console.error('Error adding order:', error);\n    throw error;\n  }\n};\nconst processOrder = async (orderId, totalPrice) => {\n  try {\n    const paypalResponse = await createPayPalPayment(totalPrice);\n    await updateOrderWithPayPalPaymentId(orderId, paypalResponse.id);\n    window.location.href = paypalResponse.links.find(link => link.rel === 'approval_url').href;\n  } catch (error) {\n    console.error('Error processing order:', error);\n    throw error;\n  }\n};\nconst createPayPalPayment = async totalAmount => {\n  try {\n    console.log(\"Value of totalAmount:\", totalAmount);\n    console.log(\"Data type of totalAmount:\", typeof totalAmount);\n    if (isNaN(totalAmount) || totalAmount <= 0) {\n      throw new Error('Invalid totalAmount value');\n    }\n    const response = await authApi.post('/PayPal/CreatePayment', {\n      totalAmount: totalAmount.toString()\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error creating PayPal payment:', error);\n    throw error;\n  }\n};\nconst updateOrderWithPayPalPaymentId = async (orderId, paypalPaymentId) => {\n  try {\n    await authApi.put(`/Order/${orderId}`, {\n      paypalPaymentId\n    });\n  } catch (error) {\n    console.error('Error updating order with PayPal payment ID:', error);\n    throw error;\n  }\n};\nexport { addOrder, processOrder };","map":{"version":3,"names":["authApi","addOrder","orderInfo","response","post","data","orderId","error","console","processOrder","totalPrice","paypalResponse","createPayPalPayment","updateOrderWithPayPalPaymentId","id","window","location","href","links","find","link","rel","totalAmount","log","isNaN","Error","toString","paypalPaymentId","put"],"sources":["/Users/nguyentran/Desktop/FYPProject/FrontEnd/src/utils/Api/OrderApi.js"],"sourcesContent":["import authApi from './AxiosConfig';\n\nconst addOrder = async (orderInfo) => {\n    try {\n        const response = await authApi.post(`/Order`, orderInfo);\n        return response.data.orderId;\n    } catch (error) {\n        console.error('Error adding order:', error);\n        throw error;\n    }\n};\n\nconst processOrder = async (orderId, totalPrice) => {\n    try {\n        const paypalResponse = await createPayPalPayment(totalPrice);\n        await updateOrderWithPayPalPaymentId(orderId, paypalResponse.id);\n        window.location.href = paypalResponse.links.find(link => link.rel === 'approval_url').href;\n    } catch (error) {\n        console.error('Error processing order:', error);\n        throw error;\n    }\n};\nconst createPayPalPayment = async (totalAmount) => {\n    try {\n        console.log(\"Value of totalAmount:\", totalAmount);\n        console.log(\"Data type of totalAmount:\", typeof totalAmount);\n        if (isNaN(totalAmount) || totalAmount <= 0) {\n            throw new Error('Invalid totalAmount value');\n        }\n        const response = await authApi.post('/PayPal/CreatePayment', { totalAmount: totalAmount.toString() });\n        return response.data;\n    } catch (error) {\n        console.error('Error creating PayPal payment:', error);\n        throw error;\n    }\n};\n\nconst updateOrderWithPayPalPaymentId = async (orderId, paypalPaymentId) => {\n    try {\n        await authApi.put(`/Order/${orderId}`, { paypalPaymentId });\n    } catch (error) {\n        console.error('Error updating order with PayPal payment ID:', error);\n        throw error;\n    }\n};\n\nexport { addOrder, processOrder };\n"],"mappings":"AAAA,OAAOA,OAAO,MAAM,eAAe;AAEnC,MAAMC,QAAQ,GAAG,MAAOC,SAAS,IAAK;EAClC,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMH,OAAO,CAACI,IAAI,CAAE,QAAO,EAAEF,SAAS,CAAC;IACxD,OAAOC,QAAQ,CAACE,IAAI,CAACC,OAAO;EAChC,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;IAC3C,MAAMA,KAAK;EACf;AACJ,CAAC;AAED,MAAME,YAAY,GAAG,MAAAA,CAAOH,OAAO,EAAEI,UAAU,KAAK;EAChD,IAAI;IACA,MAAMC,cAAc,GAAG,MAAMC,mBAAmB,CAACF,UAAU,CAAC;IAC5D,MAAMG,8BAA8B,CAACP,OAAO,EAAEK,cAAc,CAACG,EAAE,CAAC;IAChEC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAGN,cAAc,CAACO,KAAK,CAACC,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACC,GAAG,KAAK,cAAc,CAAC,CAACJ,IAAI;EAC9F,CAAC,CAAC,OAAOV,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IAC/C,MAAMA,KAAK;EACf;AACJ,CAAC;AACD,MAAMK,mBAAmB,GAAG,MAAOU,WAAW,IAAK;EAC/C,IAAI;IACAd,OAAO,CAACe,GAAG,CAAC,uBAAuB,EAAED,WAAW,CAAC;IACjDd,OAAO,CAACe,GAAG,CAAC,2BAA2B,EAAE,OAAOD,WAAW,CAAC;IAC5D,IAAIE,KAAK,CAACF,WAAW,CAAC,IAAIA,WAAW,IAAI,CAAC,EAAE;MACxC,MAAM,IAAIG,KAAK,CAAC,2BAA2B,CAAC;IAChD;IACA,MAAMtB,QAAQ,GAAG,MAAMH,OAAO,CAACI,IAAI,CAAC,uBAAuB,EAAE;MAAEkB,WAAW,EAAEA,WAAW,CAACI,QAAQ,CAAC;IAAE,CAAC,CAAC;IACrG,OAAOvB,QAAQ,CAACE,IAAI;EACxB,CAAC,CAAC,OAAOE,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;IACtD,MAAMA,KAAK;EACf;AACJ,CAAC;AAED,MAAMM,8BAA8B,GAAG,MAAAA,CAAOP,OAAO,EAAEqB,eAAe,KAAK;EACvE,IAAI;IACA,MAAM3B,OAAO,CAAC4B,GAAG,CAAE,UAAStB,OAAQ,EAAC,EAAE;MAAEqB;IAAgB,CAAC,CAAC;EAC/D,CAAC,CAAC,OAAOpB,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,8CAA8C,EAAEA,KAAK,CAAC;IACpE,MAAMA,KAAK;EACf;AACJ,CAAC;AAED,SAASN,QAAQ,EAAEQ,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}