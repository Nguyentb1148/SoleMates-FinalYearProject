{"ast":null,"code":"const baseLink = 'https://localhost:7082';\nconst login = async credentials => {\n  try {\n    const response = await fetch(`${baseLink}/Account/login`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(credentials)\n    });\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Error:', error);\n  }\n};\nconst register = async userData => {\n  try {\n    const response = await fetch(`${baseLink}/Account/register`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(userData)\n    });\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Error:', error);\n  }\n};\nconst logout = async () => {\n  try {\n    const response = await fetch(`${baseLink}/Account/logout`);\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Error:', error);\n  }\n};\nconst adminOnly = async () => {\n  try {\n    const response = await fetch(`${baseLink}/Admin/admin-only`);\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Error:', error);\n  }\n};\nconst artistOnly = async () => {\n  try {\n    const response = await fetch(`${baseLink}/Artist/artist-only`);\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Error:', error);\n  }\n};\nconst userOnly = async () => {\n  try {\n    const response = await fetch(`${baseLink}/User/user-only`);\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Error:', error);\n  }\n};\nexport { login, register, logout, adminOnly, artistOnly, userOnly };","map":{"version":3,"names":["baseLink","login","credentials","response","fetch","method","headers","body","JSON","stringify","data","json","error","console","register","userData","logout","adminOnly","artistOnly","userOnly"],"sources":["/Users/nguyentran/frontend/src/Api/api.js"],"sourcesContent":["\nconst baseLink = 'https://localhost:7082';\nconst login = async (credentials) => {\n    try {\n        const response = await fetch(`${baseLink}/Account/login`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(credentials)\n        });\n        const data = await response.json();\n        return data;\n    } catch (error) {\n        console.error('Error:', error);\n    }\n};\n\nconst register = async (userData) => {\n    try {\n        const response = await fetch(`${baseLink}/Account/register`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(userData)\n        });\n        const data = await response.json();\n        return data;\n    } catch (error) {\n        console.error('Error:', error);\n    }\n};\n\nconst logout = async () => {\n    try {\n        const response = await fetch(`${baseLink}/Account/logout`);\n        const data = await response.json();\n        return data;\n    } catch (error) {\n        console.error('Error:', error);\n    }\n};\n\nconst adminOnly = async () => {\n    try {\n        const response = await fetch(`${baseLink}/Admin/admin-only`);\n        const data = await response.json();\n        return data;\n    } catch (error) {\n        console.error('Error:', error);\n    }\n};\n\nconst artistOnly = async () => {\n    try {\n        const response = await fetch(`${baseLink}/Artist/artist-only`);\n        const data = await response.json();\n        return data;\n    } catch (error) {\n        console.error('Error:', error);\n    }\n};\n\nconst userOnly = async () => {\n    try {\n        const response = await fetch(`${baseLink}/User/user-only`);\n        const data = await response.json();\n        return data;\n    } catch (error) {\n        console.error('Error:', error);\n    }\n};\n\nexport { login, register, logout, adminOnly, artistOnly, userOnly };\n"],"mappings":"AACA,MAAMA,QAAQ,GAAG,wBAAwB;AACzC,MAAMC,KAAK,GAAG,MAAOC,WAAW,IAAK;EACjC,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEJ,QAAS,gBAAe,EAAE;MACtDK,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACP,WAAW;IACpC,CAAC,CAAC;IACF,MAAMQ,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;IAClC,OAAOD,IAAI;EACf,CAAC,CAAC,OAAOE,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;EAClC;AACJ,CAAC;AAED,MAAME,QAAQ,GAAG,MAAOC,QAAQ,IAAK;EACjC,IAAI;IACA,MAAMZ,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEJ,QAAS,mBAAkB,EAAE;MACzDK,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACM,QAAQ;IACjC,CAAC,CAAC;IACF,MAAML,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;IAClC,OAAOD,IAAI;EACf,CAAC,CAAC,OAAOE,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;EAClC;AACJ,CAAC;AAED,MAAMI,MAAM,GAAG,MAAAA,CAAA,KAAY;EACvB,IAAI;IACA,MAAMb,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEJ,QAAS,iBAAgB,CAAC;IAC1D,MAAMU,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;IAClC,OAAOD,IAAI;EACf,CAAC,CAAC,OAAOE,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;EAClC;AACJ,CAAC;AAED,MAAMK,SAAS,GAAG,MAAAA,CAAA,KAAY;EAC1B,IAAI;IACA,MAAMd,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEJ,QAAS,mBAAkB,CAAC;IAC5D,MAAMU,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;IAClC,OAAOD,IAAI;EACf,CAAC,CAAC,OAAOE,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;EAClC;AACJ,CAAC;AAED,MAAMM,UAAU,GAAG,MAAAA,CAAA,KAAY;EAC3B,IAAI;IACA,MAAMf,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEJ,QAAS,qBAAoB,CAAC;IAC9D,MAAMU,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;IAClC,OAAOD,IAAI;EACf,CAAC,CAAC,OAAOE,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;EAClC;AACJ,CAAC;AAED,MAAMO,QAAQ,GAAG,MAAAA,CAAA,KAAY;EACzB,IAAI;IACA,MAAMhB,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEJ,QAAS,iBAAgB,CAAC;IAC1D,MAAMU,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;IAClC,OAAOD,IAAI;EACf,CAAC,CAAC,OAAOE,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;EAClC;AACJ,CAAC;AAED,SAASX,KAAK,EAAEa,QAAQ,EAAEE,MAAM,EAAEC,SAAS,EAAEC,UAAU,EAAEC,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}