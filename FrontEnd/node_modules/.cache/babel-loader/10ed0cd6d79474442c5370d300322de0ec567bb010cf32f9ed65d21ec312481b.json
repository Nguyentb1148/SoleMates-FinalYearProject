{"ast":null,"code":"var _jsxFileName = \"/Users/nguyentran/Desktop/FYPProject/FrontEnd/src/Pages/Album/AddAlbum.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { ref, uploadBytes, getDownloadURL } from \"firebase/storage\";\nimport { storage } from \"../../firebase\";\nimport defaultAlbumImage from '../../Img/default-cover-art.png';\nimport { getAllSongsByUserId } from '../../Api/SongApi';\nimport { addNewAlbum, addSongToAlbum, getAllSongsInAlbum } from '../../Api/ArtistApi';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AddAlbumPage = () => {\n  _s();\n  const [albumName, setAlbumName] = useState('');\n  const [albumImage, setAlbumImage] = useState(null);\n  const [imagePreview, setImagePreview] = useState(defaultAlbumImage);\n  const navigate = useNavigate();\n  const [songs, setSongs] = useState([]);\n  const [allUserSongs, setAllUserSongs] = useState([]);\n  const [selectedSongs, setSelectedSongs] = useState(new Set());\n  const [showAddSongModal, setShowAddSongModal] = useState(false);\n  const user = JSON.parse(localStorage.getItem('user') || '{}');\n  useEffect(() => {\n    loadSongs();\n    loadUserSongs();\n  }, [user.Id]);\n  const loadSongs = async () => {\n    const fetchedSongs = await getAllSongsInAlbum(user.Id);\n    setSongs(fetchedSongs);\n  };\n  const loadUserSongs = async () => {\n    const fetchedSongs = await getAllSongsByUserId(user.Id);\n    setAllUserSongs(fetchedSongs.flat()); // Assuming your API returns nested arrays of songs\n  };\n  const handleImageChange = event => {\n    const file = event.target.files[0];\n    if (file) {\n      setAlbumImage(file);\n      const previewUrl = URL.createObjectURL(file);\n      setImagePreview(previewUrl);\n    }\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!albumName || !albumImage) {\n      alert('Please provide album name and image.');\n      return;\n    }\n    const imageFileRef = ref(storage, `AlbumImages/${albumImage.name}`);\n    const uploadResult = await uploadBytes(imageFileRef, albumImage);\n    const imageURL = await getDownloadURL(uploadResult.ref);\n    const albumData = {\n      NameOfAlbum: albumName,\n      ImageAlbumUrl: imageURL\n    };\n    try {\n      const addedAlbum = await addNewAlbum(albumData);\n      alert('Album added successfully!');\n      navigate('/ListAlbum');\n    } catch (error) {\n      console.error('Error adding album:', error);\n      alert('Failed to add album.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Add New Album\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"albumName\",\n          children: \"Album Name *\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"albumName\",\n          type: \"text\",\n          value: albumName,\n          onChange: e => setAlbumName(e.target.value),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"albumImage\",\n          children: \"Album Image *\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"albumImage\",\n          type: \"file\",\n          accept: \"image/*\",\n          onChange: handleImageChange,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: imagePreview,\n          alt: \"Album Preview\",\n          style: {\n            maxWidth: '200px'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Add Album\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 9\n  }, this);\n};\n_s(AddAlbumPage, \"TCXtUnWu2baUxnUb765ifEPkNd8=\", false, function () {\n  return [useNavigate];\n});\n_c = AddAlbumPage;\nexport default AddAlbumPage;\nvar _c;\n$RefreshReg$(_c, \"AddAlbumPage\");","map":{"version":3,"names":["React","useEffect","useState","useNavigate","ref","uploadBytes","getDownloadURL","storage","defaultAlbumImage","getAllSongsByUserId","addNewAlbum","addSongToAlbum","getAllSongsInAlbum","jsxDEV","_jsxDEV","AddAlbumPage","_s","albumName","setAlbumName","albumImage","setAlbumImage","imagePreview","setImagePreview","navigate","songs","setSongs","allUserSongs","setAllUserSongs","selectedSongs","setSelectedSongs","Set","showAddSongModal","setShowAddSongModal","user","JSON","parse","localStorage","getItem","loadSongs","loadUserSongs","Id","fetchedSongs","flat","handleImageChange","event","file","target","files","previewUrl","URL","createObjectURL","handleSubmit","e","preventDefault","alert","imageFileRef","name","uploadResult","imageURL","albumData","NameOfAlbum","ImageAlbumUrl","addedAlbum","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","htmlFor","id","type","value","onChange","required","accept","src","alt","style","maxWidth","_c","$RefreshReg$"],"sources":["/Users/nguyentran/Desktop/FYPProject/FrontEnd/src/Pages/Album/AddAlbum.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { ref, uploadBytes, getDownloadURL } from \"firebase/storage\";\nimport { storage } from \"../../firebase\";\nimport defaultAlbumImage from '../../Img/default-cover-art.png';\nimport { getAllSongsByUserId } from '../../Api/SongApi';\nimport {addNewAlbum, addSongToAlbum, getAllSongsInAlbum} from '../../Api/ArtistApi';\n\nconst AddAlbumPage = () => {\n    const [albumName, setAlbumName] = useState('');\n    const [albumImage, setAlbumImage] = useState(null);\n    const [imagePreview, setImagePreview] = useState(defaultAlbumImage);\n    const navigate = useNavigate();\n    const [songs, setSongs] = useState([]);\n    const [allUserSongs, setAllUserSongs] = useState([]);\n    const [selectedSongs, setSelectedSongs] = useState(new Set());\n    const [showAddSongModal, setShowAddSongModal] = useState(false);\n    const user = JSON.parse(localStorage.getItem('user') || '{}');\n\n\n    useEffect(() => {\n        loadSongs();\n        loadUserSongs();\n    }, [user.Id]);\n    const loadSongs = async () => {\n        const fetchedSongs = await getAllSongsInAlbum(user.Id);\n        setSongs(fetchedSongs);\n    };\n\n    const loadUserSongs = async () => {\n        const fetchedSongs = await getAllSongsByUserId(user.Id);\n        setAllUserSongs(fetchedSongs.flat()); // Assuming your API returns nested arrays of songs\n    };\n    const handleImageChange = (event) => {\n        const file = event.target.files[0];\n        if (file) {\n            setAlbumImage(file);\n            const previewUrl = URL.createObjectURL(file);\n            setImagePreview(previewUrl);\n        }\n    };\n\n\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n        if (!albumName || !albumImage) {\n            alert('Please provide album name and image.');\n            return;\n        }\n\n        const imageFileRef = ref(storage, `AlbumImages/${albumImage.name}`);\n        const uploadResult = await uploadBytes(imageFileRef, albumImage);\n        const imageURL = await getDownloadURL(uploadResult.ref);\n\n        const albumData = {\n            NameOfAlbum: albumName,\n            ImageAlbumUrl: imageURL,\n        };\n\n        try {\n            const addedAlbum = await addNewAlbum(albumData);\n\n            alert('Album added successfully!');\n            navigate('/ListAlbum');\n        } catch (error) {\n            console.error('Error adding album:', error);\n            alert('Failed to add album.');\n        }\n    };\n\n\n    return (\n        <div>\n            <h2>Add New Album</h2>\n            <form onSubmit={handleSubmit}>\n                <div>\n                    <label htmlFor=\"albumName\">Album Name *</label>\n                    <input\n                        id=\"albumName\"\n                        type=\"text\"\n                        value={albumName}\n                        onChange={(e) => setAlbumName(e.target.value)}\n                        required\n                    />\n                </div>\n                <div>\n                    <label htmlFor=\"albumImage\">Album Image *</label>\n                    <input\n                        id=\"albumImage\"\n                        type=\"file\"\n                        accept=\"image/*\"\n                        onChange={handleImageChange}\n                        required\n                    />\n                    <img src={imagePreview} alt=\"Album Preview\" style={{ maxWidth: '200px' }} />\n                </div>\n                <button type=\"submit\">Add Album</button>\n            </form>\n        </div>\n    );\n};\n\nexport default AddAlbumPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}