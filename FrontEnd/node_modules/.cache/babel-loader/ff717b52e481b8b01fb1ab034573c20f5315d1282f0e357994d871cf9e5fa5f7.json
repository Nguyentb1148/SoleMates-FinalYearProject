{"ast":null,"code":"import authApi from './AxiosConfig';\nconst processOrder = async (orderId, totalAmount) => {\n  try {\n    console.log(\"total amount process order: \", totalAmount);\n    const paypalResponse = await createPayPalPayment(totalAmount);\n    await updateOrderWithPayPalPaymentId(orderId, paypalResponse.id);\n    window.location.href = paypalResponse.links.find(link => link.rel === 'approval_url').href;\n  } catch (error) {\n    console.error('Error processing order:', error);\n    throw error;\n  }\n};\nconst createPayPalPayment = async totalAmount => {\n  try {\n    if (typeof totalAmount !== 'number') {\n      throw new Error('Invalid totalAmount value');\n    }\n    console.log(\"total amount createPayPalPayment: \", totalAmount);\n    const response = await authApi.post('/PayPal/CreatePayment', totalAmount);\n    return response.data;\n  } catch (error) {\n    console.error('Error creating PayPal payment:', error);\n    throw error;\n  }\n};\nconst updateOrderWithPayPalPaymentId = async (orderId, paypalPaymentId) => {\n  try {\n    await authApi.put(`/Order/${orderId}`, {\n      paypalPaymentId\n    });\n  } catch (error) {\n    console.error('Error updating order with PayPal payment ID:', error);\n    throw error;\n  }\n};\nconst addOrder = async formData => {\n  try {\n    const response = await authApi.post(`/Order`, formData);\n    return response.data;\n  } catch (error) {\n    console.error('Error:', error);\n    throw error;\n  }\n};\nexport { addOrder, processOrder };","map":{"version":3,"names":["authApi","processOrder","orderId","totalAmount","console","log","paypalResponse","createPayPalPayment","updateOrderWithPayPalPaymentId","id","window","location","href","links","find","link","rel","error","Error","response","post","data","paypalPaymentId","put","addOrder","formData"],"sources":["/Users/nguyentran/Desktop/FYPProject/FrontEnd/src/utils/Api/OrderApi.js"],"sourcesContent":["import authApi from './AxiosConfig';\n\nconst processOrder = async (orderId, totalAmount) => {\n    try {\n        console.log(\"total amount process order: \", totalAmount);\n        const paypalResponse = await createPayPalPayment(totalAmount);\n        await updateOrderWithPayPalPaymentId(orderId, paypalResponse.id);\n        window.location.href = paypalResponse.links.find(link => link.rel === 'approval_url').href;\n    } catch (error) {\n        console.error('Error processing order:', error);\n        throw error;\n    }\n};\n\nconst createPayPalPayment = async (totalAmount) => {\n    try {\n        if (typeof totalAmount !== 'number') {\n            throw new Error('Invalid totalAmount value');\n        }\n        console.log(\"total amount createPayPalPayment: \", totalAmount);\n        const response = await authApi.post('/PayPal/CreatePayment', totalAmount);\n        return response.data;\n    } catch (error) {\n        console.error('Error creating PayPal payment:', error);\n        throw error;\n    }\n}\n\n\nconst updateOrderWithPayPalPaymentId = async (orderId, paypalPaymentId) => {\n    try {\n        await authApi.put(`/Order/${orderId}`, { paypalPaymentId });\n    } catch (error) {\n        console.error('Error updating order with PayPal payment ID:', error);\n        throw error;\n    }\n};\n\n\nconst addOrder = async (formData) => {\n    try {\n        const response = await authApi.post(`/Order`, formData);\n        return response.data;\n    } catch (error) {\n        console.error('Error:', error);\n        throw error;\n    }\n}\n\nexport {addOrder,processOrder}"],"mappings":"AAAA,OAAOA,OAAO,MAAM,eAAe;AAEnC,MAAMC,YAAY,GAAG,MAAAA,CAAOC,OAAO,EAAEC,WAAW,KAAK;EACjD,IAAI;IACAC,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAEF,WAAW,CAAC;IACxD,MAAMG,cAAc,GAAG,MAAMC,mBAAmB,CAACJ,WAAW,CAAC;IAC7D,MAAMK,8BAA8B,CAACN,OAAO,EAAEI,cAAc,CAACG,EAAE,CAAC;IAChEC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAGN,cAAc,CAACO,KAAK,CAACC,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACC,GAAG,KAAK,cAAc,CAAC,CAACJ,IAAI;EAC9F,CAAC,CAAC,OAAOK,KAAK,EAAE;IACZb,OAAO,CAACa,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IAC/C,MAAMA,KAAK;EACf;AACJ,CAAC;AAED,MAAMV,mBAAmB,GAAG,MAAOJ,WAAW,IAAK;EAC/C,IAAI;IACA,IAAI,OAAOA,WAAW,KAAK,QAAQ,EAAE;MACjC,MAAM,IAAIe,KAAK,CAAC,2BAA2B,CAAC;IAChD;IACAd,OAAO,CAACC,GAAG,CAAC,oCAAoC,EAAEF,WAAW,CAAC;IAC9D,MAAMgB,QAAQ,GAAG,MAAMnB,OAAO,CAACoB,IAAI,CAAC,uBAAuB,EAAEjB,WAAW,CAAC;IACzE,OAAOgB,QAAQ,CAACE,IAAI;EACxB,CAAC,CAAC,OAAOJ,KAAK,EAAE;IACZb,OAAO,CAACa,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;IACtD,MAAMA,KAAK;EACf;AACJ,CAAC;AAGD,MAAMT,8BAA8B,GAAG,MAAAA,CAAON,OAAO,EAAEoB,eAAe,KAAK;EACvE,IAAI;IACA,MAAMtB,OAAO,CAACuB,GAAG,CAAE,UAASrB,OAAQ,EAAC,EAAE;MAAEoB;IAAgB,CAAC,CAAC;EAC/D,CAAC,CAAC,OAAOL,KAAK,EAAE;IACZb,OAAO,CAACa,KAAK,CAAC,8CAA8C,EAAEA,KAAK,CAAC;IACpE,MAAMA,KAAK;EACf;AACJ,CAAC;AAGD,MAAMO,QAAQ,GAAG,MAAOC,QAAQ,IAAK;EACjC,IAAI;IACA,MAAMN,QAAQ,GAAG,MAAMnB,OAAO,CAACoB,IAAI,CAAE,QAAO,EAAEK,QAAQ,CAAC;IACvD,OAAON,QAAQ,CAACE,IAAI;EACxB,CAAC,CAAC,OAAOJ,KAAK,EAAE;IACZb,OAAO,CAACa,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;IAC9B,MAAMA,KAAK;EACf;AACJ,CAAC;AAED,SAAQO,QAAQ,EAACvB,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}