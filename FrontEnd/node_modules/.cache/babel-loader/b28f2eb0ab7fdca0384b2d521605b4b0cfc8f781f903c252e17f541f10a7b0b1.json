{"ast":null,"code":"var _jsxFileName = \"/Users/nguyentran/Desktop/FYPProject/FrontEnd/src/Pages/Song/EditSong.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { updateSongById, deleteSongById, getSongById } from '../../Api/SongApi';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EditSong = () => {\n  _s();\n  const {\n    songId\n  } = useParams();\n  const [song, setSong] = useState({\n    title: ''\n    // Initialize other song attributes you want to edit\n  });\n  const navigate = useNavigate();\n  useEffect(() => {\n    const fetchSong = async () => {\n      try {\n        if (songId) {\n          const songData = await getSongById(songId);\n          setSong({\n            title: songData.title\n            // Set other song attributes here based on fetched data\n          });\n        }\n      } catch (error) {\n        console.error('Error fetching song:', error);\n      }\n    };\n    fetchSong();\n  }, [songId]);\n  const handleChange = event => {\n    const {\n      name,\n      value\n    } = event.target;\n    setSong(prevSong => ({\n      ...prevSong,\n      [name]: value\n    }));\n  };\n  const handleSubmit = async event => {\n    event.preventDefault();\n    try {\n      await updateSongById(songId, song);\n      alert('Song updated successfully');\n      navigate('/ListSong'); // Navigate back to the list of songs\n    } catch (error) {\n      console.error('Error updating the song:', error);\n    }\n  };\n  const handleDelete = async () => {\n    const confirmation = window.confirm('Are you sure you want to delete this song?');\n    if (confirmation) {\n      try {\n        await deleteSongById(songId);\n        alert('Song deleted successfully');\n        navigate('/ListSong'); // Navigate back to the list of songs\n      } catch (error) {\n        console.error('Error deleting the song:', error);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Edit Song\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this), song && /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"title\",\n          children: \"Title:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"title\",\n          name: \"title\",\n          value: song.title,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Update Song\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: handleDelete,\n        children: \"Delete Song\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 9\n  }, this);\n};\n_s(EditSong, \"ffh27jGo1NBxxd+tPwQ4M5isf/w=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = EditSong;\nexport default EditSong;\nvar _c;\n$RefreshReg$(_c, \"EditSong\");","map":{"version":3,"names":["React","useState","useEffect","useParams","useNavigate","updateSongById","deleteSongById","getSongById","jsxDEV","_jsxDEV","EditSong","_s","songId","song","setSong","title","navigate","fetchSong","songData","error","console","handleChange","event","name","value","target","prevSong","handleSubmit","preventDefault","alert","handleDelete","confirmation","window","confirm","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","htmlFor","type","id","onChange","onClick","_c","$RefreshReg$"],"sources":["/Users/nguyentran/Desktop/FYPProject/FrontEnd/src/Pages/Song/EditSong.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { updateSongById, deleteSongById, getSongById } from '../../Api/SongApi';\n\nconst EditSong = () => {\n    const { songId } = useParams();\n    const [song, setSong] = useState({\n        title: '',\n        // Initialize other song attributes you want to edit\n    });\n    const navigate = useNavigate();\n\n    useEffect(() => {\n        const fetchSong = async () => {\n            try {\n                if (songId) {\n                    const songData = await getSongById(songId);\n                    setSong({\n                        title: songData.title,\n                        // Set other song attributes here based on fetched data\n                    });\n                }\n            } catch (error) {\n                console.error('Error fetching song:', error);\n            }\n        };\n\n        fetchSong();\n    }, [songId]);\n\n    const handleChange = (event) => {\n        const { name, value } = event.target;\n        setSong((prevSong) => ({\n            ...prevSong,\n            [name]: value,\n        }));\n    };\n\n    const handleSubmit = async (event) => {\n        event.preventDefault();\n        try {\n            await updateSongById(songId, song);\n            alert('Song updated successfully');\n            navigate('/ListSong'); // Navigate back to the list of songs\n        } catch (error) {\n            console.error('Error updating the song:', error);\n        }\n    };\n\n    const handleDelete = async () => {\n        const confirmation = window.confirm('Are you sure you want to delete this song?');\n        if (confirmation) {\n            try {\n                await deleteSongById(songId);\n                alert('Song deleted successfully');\n                navigate('/ListSong'); // Navigate back to the list of songs\n            } catch (error) {\n                console.error('Error deleting the song:', error);\n            }\n        }\n    };\n\n    return (\n        <div>\n            <h2>Edit Song</h2>\n            {song && (\n                <form onSubmit={handleSubmit}>\n                    <div>\n                        <label htmlFor=\"title\">Title:</label>\n                        <input\n                            type=\"text\"\n                            id=\"title\"\n                            name=\"title\"\n                            value={song.title}\n                            onChange={handleChange}\n                        />\n                    </div>\n                    {/* Include other input fields for song attributes here */}\n                    <button type=\"submit\">Update Song</button>\n                    <button type=\"button\" onClick={handleDelete}>Delete Song</button>\n                </form>\n            )}\n        </div>\n    );\n};\n\nexport default EditSong;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}